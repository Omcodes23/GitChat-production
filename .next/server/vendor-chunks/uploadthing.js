"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl)\n/* harmony export */ });\n// src/internal/get-full-api-url.ts\nfunction getFullApiUrl(maybeUrl) {\n    const base = (()=>{\n        var _a, _b;\n        if (false) {}\n        if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n            return `https://${process.env.VERCEL_URL}`;\n        }\n        if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n            return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n        }\n        return \"http://localhost:3000\";\n    })();\n    try {\n        const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n        if (url.pathname === \"/\") {\n            url.pathname = \"/api/uploadthing\";\n        }\n        return url;\n    } catch (err) {\n        throw new Error(`Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`);\n    }\n}\n //# sourceMappingURL=chunk-4PDGVH57.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG1DQUFtQztBQUNuQyxTQUFTQSxjQUFjQyxRQUFRO0lBQzdCLE1BQU1DLE9BQU8sQ0FBQztRQUNaLElBQUlDLElBQUlDO1FBQ1IsSUFBSSxLQUE2QixFQUFFLEVBRWxDO1FBQ0QsSUFBSSxPQUFPSSxZQUFZLGVBQWdCLEVBQUNMLEtBQUtLLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFDLEdBQUcsS0FBSyxPQUFPLEtBQUssSUFBSU4sR0FBR08sVUFBVSxHQUFHO1lBQ3RILE9BQU8sQ0FBQyxRQUFRLEVBQUVGLFFBQVFDLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7UUFDNUM7UUFDQSxJQUFJLENBQUNOLEtBQUssMkNBQWUsS0FBSyxPQUFPLEtBQUssSUFBSUEsR0FBR00sVUFBVSxFQUFFO1lBQzNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsaUVBQTBCLENBQUMsQ0FBQztRQUNoRDtRQUNBLE9BQU87SUFDVDtJQUNBLElBQUk7UUFDRixNQUFNQyxNQUFNLElBQUlDLElBQUlYLFlBQVksb0JBQW9CQztRQUNwRCxJQUFJUyxJQUFJRSxRQUFRLEtBQUssS0FBSztZQUN4QkYsSUFBSUUsUUFBUSxHQUFHO1FBQ2pCO1FBQ0EsT0FBT0Y7SUFDVCxFQUFFLE9BQU9HLEtBQUs7UUFDWixNQUFNLElBQUlDLE1BQ1IsQ0FBQyxpQkFBaUIsRUFBRWQsU0FBUyw4Q0FBOEMsQ0FBQztJQUVoRjtBQUNGO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtLWNoYXQtYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanM/MjRkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW50ZXJuYWwvZ2V0LWZ1bGwtYXBpLXVybC50c1xuZnVuY3Rpb24gZ2V0RnVsbEFwaVVybChtYXliZVVybCkge1xuICBjb25zdCBiYXNlID0gKCgpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmICgoX2EgPSBwcm9jZXNzID09IG51bGwgPyB2b2lkIDAgOiBwcm9jZXNzLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLlZFUkNFTF9VUkwpKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5WRVJDRUxfVVJMfWA7XG4gICAgfVxuICAgIGlmICgoX2IgPSBpbXBvcnQubWV0YS5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYi5WRVJDRUxfVVJMKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vJHtpbXBvcnQubWV0YS5lbnYuVkVSQ0VMX1VSTH1gO1xuICAgIH1cbiAgICByZXR1cm4gXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIjtcbiAgfSkoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKG1heWJlVXJsID8/IFwiL2FwaS91cGxvYWR0aGluZ1wiLCBiYXNlKTtcbiAgICBpZiAodXJsLnBhdGhuYW1lID09PSBcIi9cIikge1xuICAgICAgdXJsLnBhdGhuYW1lID0gXCIvYXBpL3VwbG9hZHRoaW5nXCI7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGYWlsZWQgdG8gcGFyc2UgJyR7bWF5YmVVcmx9JyBhcyBhIFVSTC4gTWFrZSBzdXJlIGl0J3MgYSB2YWxpZCBVUkwgb3IgcGF0aGBcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGdldEZ1bGxBcGlVcmxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay00UERHVkg1Ny5tanMubWFwIl0sIm5hbWVzIjpbImdldEZ1bGxBcGlVcmwiLCJtYXliZVVybCIsImJhc2UiLCJfYSIsIl9iIiwid2luZG93IiwibG9jYXRpb24iLCJvcmlnaW4iLCJwcm9jZXNzIiwiZW52IiwiVkVSQ0VMX1VSTCIsInVybCIsIlVSTCIsInBhdGhuYW1lIiwiZXJyIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig)\n/* harmony export */ });\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-SHB3FCAQ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/server.ts\n\n// src/sdk/index.ts\n\n// src/sdk/utils.ts\n\nfunction guardServerOnly() {\n    if (false) {}\n}\nfunction getApiKeyOrThrow(apiKey) {\n    if (apiKey) return apiKey;\n    if (process.env.UPLOADTHING_SECRET) return process.env.UPLOADTHING_SECRET;\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Missing `UPLOADTHING_SECRET` env variable.\"\n    });\n}\nvar uploadFilesInternal = async (data, opts)=>{\n    const fileData = data.files.map((file)=>({\n            name: file.name ?? \"unnamed-blob\",\n            type: file.type,\n            size: file.size\n        }));\n    const res = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n        method: \"POST\",\n        headers: opts.utRequestHeaders,\n        cache: \"no-store\",\n        body: JSON.stringify({\n            files: fileData,\n            metadata: data.metadata,\n            contentDisposition: data.contentDisposition\n        })\n    });\n    if (!res.ok) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(res);\n        throw error;\n    }\n    const clonedRes = res.clone();\n    const json = await res.json();\n    if (\"error\" in json) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(clonedRes);\n        throw error;\n    }\n    const uploads = await Promise.allSettled(data.files.map(async (file, i)=>{\n        const { presignedUrls, key, fileUrl, uploadId, chunkSize } = json.data[i];\n        if (!presignedUrls || !Array.isArray(presignedUrls)) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"URL_GENERATION_FAILED\",\n                message: \"Failed to generate presigned URL\",\n                cause: JSON.stringify(json.data[i])\n            });\n        }\n        const etags = await Promise.all(presignedUrls.map(async (url, index)=>{\n            const offset = chunkSize * index;\n            const end = Math.min(offset + chunkSize, file.size);\n            const chunk = file.slice(offset, end);\n            const etag = await (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPart)({\n                fetch: opts.fetch,\n                url,\n                chunk,\n                contentDisposition: data.contentDisposition,\n                contentType: file.type,\n                fileName: file.name,\n                maxRetries: 10,\n                key,\n                utRequestHeaders: opts.utRequestHeaders\n            });\n            return {\n                tag: etag,\n                partNumber: index + 1\n            };\n        }));\n        await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/completeMultipart\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                fileKey: key,\n                uploadId,\n                etags\n            }),\n            headers: opts.utRequestHeaders\n        });\n        await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.pollForFileData)({\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(`/api/pollUpload/${key}`),\n            apiKey: opts.utRequestHeaders[\"x-uploadthing-api-key\"],\n            sdkVersion: _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        });\n        return {\n            key,\n            url: fileUrl,\n            name: file.name,\n            size: file.size\n        };\n    }));\n    return uploads.map((upload)=>{\n        if (upload.status === \"fulfilled\") {\n            const data2 = upload.value;\n            return {\n                data: data2,\n                error: null\n            };\n        }\n        const reason = upload.reason;\n        const error = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.toObject(reason);\n        return {\n            data: null,\n            error\n        };\n    });\n};\n// src/sdk/index.ts\nvar UTApi = class {\n    constructor(opts){\n        this.fetch = (opts == null ? void 0 : opts.fetch) ?? globalThis.fetch;\n        this.apiKey = (opts == null ? void 0 : opts.apiKey) ?? process.env.UPLOADTHING_SECRET;\n        this.defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            \"x-uploadthing-api-key\": this.apiKey,\n            \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        };\n        guardServerOnly();\n        getApiKeyOrThrow(this.apiKey);\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    }\n    async requestUploadThing(pathname, body, fallbackErrorMessage) {\n        const res = await this.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(pathname), {\n            method: \"POST\",\n            cache: \"no-store\",\n            headers: this.defaultHeaders,\n            body: JSON.stringify(body)\n        });\n        const json = await res.json();\n        if (!res.ok || \"error\" in json) {\n            console.error(\"[UT] Error:\", json);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"error\" in json && typeof json.error === \"string\" ? json.error : fallbackErrorMessage\n            });\n        }\n        return json;\n    }\n    /**\n   * @param {FileEsque | FileEsque[]} files The file(s) to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */ async uploadFiles(files, opts) {\n        guardServerOnly();\n        const filesToUpload = Array.isArray(files) ? files : [\n            files\n        ];\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n            contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */ async uploadFilesFromUrl(urls, opts) {\n        guardServerOnly();\n        const fileUrls = Array.isArray(urls) ? urls : [\n            urls\n        ];\n        const formData = new FormData();\n        formData.append(\"metadata\", JSON.stringify((opts == null ? void 0 : opts.metadata) ?? {}));\n        const filesToUpload = await Promise.all(fileUrls.map(async (url)=>{\n            if (typeof url === \"string\") url = new URL(url);\n            const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n            const fileResponse = await fetch(url);\n            if (!fileResponse.ok) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: fileResponse\n                });\n            }\n            const blob = await fileResponse.blob();\n            return Object.assign(blob, {\n                name: filename\n            });\n        }));\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n            contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   */ async deleteFiles(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        return this.requestUploadThing(\"/api/deleteFile\", {\n            fileKeys\n        }, \"An unknown error occured while deleting files.\");\n    }\n    /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ async getFileUrls(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        const json = await this.requestUploadThing(\"/api/getFileUrl\", {\n            fileKeys\n        }, \"An unknown error occured while retrieving file URLs.\");\n        return json.data;\n    }\n    /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ async listFiles(opts) {\n        guardServerOnly();\n        const json = await this.requestUploadThing(\"/api/listFiles\", opts, \"An unknown error occured while listing files.\");\n        return json.files;\n    }\n    async renameFile(updates) {\n        guardServerOnly();\n        if (!Array.isArray(updates)) updates = [\n            updates\n        ];\n        return this.requestUploadThing(\"/api/renameFile\", {\n            updates\n        }, \"An unknown error occured while renaming files.\");\n    }\n    async getUsageInfo() {\n        guardServerOnly();\n        return this.requestUploadThing(\"/api/getUsageInfo\", {}, \"An unknown error occured while getting usage info.\");\n    }\n};\n// src/server.ts\nvar createUploadthing = (opts)=>(0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.createBuilder)(opts);\nvar createServerHandler = (opts)=>{\n    (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    const requestHandler = (0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.buildRequestHandler)(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await requestHandler({\n            req\n        });\n        if (response instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError) {\n            return new Response(JSON.stringify((0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.formatError)(response, opts.router)), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.getStatusCodeFromError)(response),\n                headers: {\n                    \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        if (response.status !== 200) {\n            return new Response(\"An unknown error occured\", {\n                status: 500,\n                headers: {\n                    \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        return new Response(JSON.stringify(response.body), {\n            status: response.status,\n            headers: {\n                \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    const getBuildPerms = (0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)(opts);\n    const GET = (request)=>{\n        const _req = request instanceof Request ? request : request.request;\n        return new Response(JSON.stringify(getBuildPerms()), {\n            status: 200,\n            headers: {\n                \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nvar extractRouterConfig = (router)=>(0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)({\n        router\n    })();\n //# sourceMappingURL=chunk-Q54J3NSA.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1RNTRKM05TQS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFOEI7QUFHQTtBQU9BO0FBRTlCLGdCQUFnQjtBQUNvRjtBQUVwRyxtQkFBbUI7QUFDNEc7QUFFL0gsbUJBQW1CO0FBS1U7QUFDN0IsU0FBU2M7SUFDUCxJQUFJLEtBQTZCLEVBQUUsRUFLbEM7QUFDSDtBQUNBLFNBQVNHLGlCQUFpQkMsTUFBTTtJQUM5QixJQUFJQSxRQUNGLE9BQU9BO0lBQ1QsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxrQkFBa0IsRUFDaEMsT0FBT0YsUUFBUUMsR0FBRyxDQUFDQyxrQkFBa0I7SUFDdkMsTUFBTSxJQUFJYixpRUFBZ0JBLENBQUM7UUFDekJPLE1BQU07UUFDTkMsU0FBUztJQUNYO0FBQ0Y7QUFDQSxJQUFJTSxzQkFBc0IsT0FBT0MsTUFBTUM7SUFDckMsTUFBTUMsV0FBV0YsS0FBS0csS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsT0FBVTtZQUN6Q0MsTUFBTUQsS0FBS0MsSUFBSSxJQUFJO1lBQ25CQyxNQUFNRixLQUFLRSxJQUFJO1lBQ2ZDLE1BQU1ILEtBQUtHLElBQUk7UUFDakI7SUFDQSxNQUFNQyxNQUFNLE1BQU1SLEtBQUtTLEtBQUssQ0FBQ3ZCLDJFQUFzQkEsQ0FBQyxxQkFBcUI7UUFDdkV3QixRQUFRO1FBQ1JDLFNBQVNYLEtBQUtZLGdCQUFnQjtRQUM5QkMsT0FBTztRQUNQQyxNQUFNQyxLQUFLQyxTQUFTLENBQUM7WUFDbkJkLE9BQU9EO1lBQ1BnQixVQUFVbEIsS0FBS2tCLFFBQVE7WUFDdkJDLG9CQUFvQm5CLEtBQUttQixrQkFBa0I7UUFDN0M7SUFDRjtJQUNBLElBQUksQ0FBQ1YsSUFBSVcsRUFBRSxFQUFFO1FBQ1gsTUFBTUMsUUFBUSxNQUFNcEMsaUVBQWdCQSxDQUFDcUMsWUFBWSxDQUFDYjtRQUNsRCxNQUFNWTtJQUNSO0lBQ0EsTUFBTUUsWUFBWWQs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QkFBeUJqQyxvRUFBbUJBO1lBQzlDO1FBQ0Y7SUFDRjtJQUNBLE1BQU02SCxnQkFBZ0I1SCxnRkFBMkJBLENBQUNxQjtJQUNsRCxNQUFNd0csTUFBTSxDQUFDUDtRQUNYLE1BQU1RLE9BQU9SLG1CQUFtQkUsVUFBVUYsVUFBVUEsUUFBUUEsT0FBTztRQUNuRSxPQUFPLElBQUlJLFNBQVN0RixLQUFLQyxTQUFTLENBQUN1RixrQkFBa0I7WUFDbkQvQyxRQUFRO1lBQ1I3QyxTQUFTO2dCQUNQLHlCQUF5QmpDLG9FQUFtQkE7WUFDOUM7UUFDRjtJQUNGO0lBQ0EsT0FBTztRQUFFOEg7UUFBS1I7SUFBSztBQUNyQjtBQUNBLElBQUlVLHNCQUFzQixDQUFDSixTQUFXM0gsZ0ZBQTJCQSxDQUFDO1FBQUUySDtJQUFPO0FBT3pFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbS1jaGF0LWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstUTU0SjNOU0EubWpzPzkwM2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdXBsb2FkUGFydFxufSBmcm9tIFwiLi9jaHVuay1TM1IzVlhSSy5tanNcIjtcbmltcG9ydCB7XG4gIGluY29tcGF0aWJsZU5vZGVHdWFyZFxufSBmcm9tIFwiLi9jaHVuay1XUFNZM01GSi5tanNcIjtcbmltcG9ydCB7XG4gIFVQTE9BRFRISU5HX1ZFUlNJT04sXG4gIGJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlcixcbiAgYnVpbGRSZXF1ZXN0SGFuZGxlcixcbiAgY3JlYXRlQnVpbGRlcixcbiAgZm9ybWF0RXJyb3Jcbn0gZnJvbSBcIi4vY2h1bmstU0hCM0ZDQVEubWpzXCI7XG5cbi8vIHNyYy9zZXJ2ZXIudHNcbmltcG9ydCB7IGdldFN0YXR1c0NvZGVGcm9tRXJyb3IsIFVwbG9hZFRoaW5nRXJyb3IgYXMgVXBsb2FkVGhpbmdFcnJvcjMgfSBmcm9tIFwiQHVwbG9hZHRoaW5nL3NoYXJlZFwiO1xuXG4vLyBzcmMvc2RrL2luZGV4LnRzXG5pbXBvcnQgeyBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMIGFzIGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyLCBVcGxvYWRUaGluZ0Vycm9yIGFzIFVwbG9hZFRoaW5nRXJyb3IyIH0gZnJvbSBcIkB1cGxvYWR0aGluZy9zaGFyZWRcIjtcblxuLy8gc3JjL3Nkay91dGlscy50c1xuaW1wb3J0IHtcbiAgZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTCxcbiAgcG9sbEZvckZpbGVEYXRhLFxuICBVcGxvYWRUaGluZ0Vycm9yXG59IGZyb20gXCJAdXBsb2FkdGhpbmcvc2hhcmVkXCI7XG5mdW5jdGlvbiBndWFyZFNlcnZlck9ubHkoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgIG1lc3NhZ2U6IFwiVGhlIGB1dGFwaWAgY2FuIG9ubHkgYmUgdXNlZCBvbiB0aGUgc2VydmVyLlwiXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEFwaUtleU9yVGhyb3coYXBpS2V5KSB7XG4gIGlmIChhcGlLZXkpXG4gICAgcmV0dXJuIGFwaUtleTtcbiAgaWYgKHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVClcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuVVBMT0FEVEhJTkdfU0VDUkVUO1xuICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgY29kZTogXCJNSVNTSU5HX0VOVlwiLFxuICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBgVVBMT0FEVEhJTkdfU0VDUkVUYCBlbnYgdmFyaWFibGUuXCJcbiAgfSk7XG59XG52YXIgdXBsb2FkRmlsZXNJbnRlcm5hbCA9IGFzeW5jIChkYXRhLCBvcHRzKSA9PiB7XG4gIGNvbnN0IGZpbGVEYXRhID0gZGF0YS5maWxlcy5tYXAoKGZpbGUpID0+ICh7XG4gICAgbmFtZTogZmlsZS5uYW1lID8/IFwidW5uYW1lZC1ibG9iXCIsXG4gICAgdHlwZTogZmlsZS50eXBlLFxuICAgIHNpemU6IGZpbGUuc2l6ZVxuICB9KSk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IG9wdHMuZmV0Y2goZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTChcIi9hcGkvdXBsb2FkRmlsZXNcIiksIHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGhlYWRlcnM6IG9wdHMudXRSZXF1ZXN0SGVhZGVycyxcbiAgICBjYWNoZTogXCJuby1zdG9yZVwiLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGZpbGVzOiBmaWxlRGF0YSxcbiAgICAgIG1ldGFkYXRhOiBkYXRhLm1ldGFkYXRhLFxuICAgICAgY29udGVudERpc3Bvc2l0aW9uOiBkYXRhLmNvbnRlbnREaXNwb3NpdGlvblxuICAgIH0pXG4gIH0pO1xuICBpZiAoIXJlcy5vaykge1xuICAgIGNvbnN0IGVycm9yID0gYXdhaXQgVXBsb2FkVGhpbmdFcnJvci5mcm9tUmVzcG9uc2UocmVzKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICBjb25zdCBjbG9uZWRSZXMgPSByZXMuY2xvbmUoKTtcbiAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gIGlmIChcImVycm9yXCIgaW4ganNvbikge1xuICAgIGNvbnN0IGVycm9yID0gYXdhaXQgVXBsb2FkVGhpbmdFcnJvci5mcm9tUmVzcG9uc2UoY2xvbmVkUmVzKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICBjb25zdCB1cGxvYWRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFxuICAgIGRhdGEuZmlsZXMubWFwKGFzeW5jIChmaWxlLCBpKSA9PiB7XG4gICAgICBjb25zdCB7IHByZXNpZ25lZFVybHMsIGtleSwgZmlsZVVybCwgdXBsb2FkSWQsIGNodW5rU2l6ZSB9ID0ganNvbi5kYXRhW2ldO1xuICAgICAgaWYgKCFwcmVzaWduZWRVcmxzIHx8ICFBcnJheS5pc0FycmF5KHByZXNpZ25lZFVybHMpKSB7XG4gICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICBjb2RlOiBcIlVSTF9HRU5FUkFUSU9OX0ZBSUxFRFwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHByZXNpZ25lZCBVUkxcIixcbiAgICAgICAgICBjYXVzZTogSlNPTi5zdHJpbmdpZnkoanNvbi5kYXRhW2ldKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV0YWdzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHByZXNpZ25lZFVybHMubWFwKGFzeW5jICh1cmwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY2h1bmtTaXplICogaW5kZXg7XG4gICAgICAgICAgY29uc3QgZW5kID0gTWF0aC5taW4ob2Zmc2V0ICsgY2h1bmtTaXplLCBmaWxlLnNpemUpO1xuICAgICAgICAgIGNvbnN0IGNodW5rID0gZmlsZS5zbGljZShvZmZzZXQsIGVuZCk7XG4gICAgICAgICAgY29uc3QgZXRhZyA9IGF3YWl0IHVwbG9hZFBhcnQoe1xuICAgICAgICAgICAgZmV0Y2g6IG9wdHMuZmV0Y2gsXG4gICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICBjaHVuayxcbiAgICAgICAgICAgIGNvbnRlbnREaXNwb3NpdGlvbjogZGF0YS5jb250ZW50RGlzcG9zaXRpb24sXG4gICAgICAgICAgICBjb250ZW50VHlwZTogZmlsZS50eXBlLFxuICAgICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgIG1heFJldHJpZXM6IDEwLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdXRSZXF1ZXN0SGVhZGVyczogb3B0cy51dFJlcXVlc3RIZWFkZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHsgdGFnOiBldGFnLCBwYXJ0TnVtYmVyOiBpbmRleCArIDEgfTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICBhd2FpdCBvcHRzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL2NvbXBsZXRlTXVsdGlwYXJ0XCIpLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBmaWxlS2V5OiBrZXksXG4gICAgICAgICAgdXBsb2FkSWQsXG4gICAgICAgICAgZXRhZ3NcbiAgICAgICAgfSksXG4gICAgICAgIGhlYWRlcnM6IG9wdHMudXRSZXF1ZXN0SGVhZGVyc1xuICAgICAgfSk7XG4gICAgICBhd2FpdCBwb2xsRm9yRmlsZURhdGEoe1xuICAgICAgICB1cmw6IGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoYC9hcGkvcG9sbFVwbG9hZC8ke2tleX1gKSxcbiAgICAgICAgYXBpS2V5OiBvcHRzLnV0UmVxdWVzdEhlYWRlcnNbXCJ4LXVwbG9hZHRoaW5nLWFwaS1rZXlcIl0sXG4gICAgICAgIHNka1ZlcnNpb246IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5LFxuICAgICAgICB1cmw6IGZpbGVVcmwsXG4gICAgICAgIG5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgc2l6ZTogZmlsZS5zaXplXG4gICAgICB9O1xuICAgIH0pXG4gICk7XG4gIHJldHVybiB1cGxvYWRzLm1hcCgodXBsb2FkKSA9PiB7XG4gICAgaWYgKHVwbG9hZC5zdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIpIHtcbiAgICAgIGNvbnN0IGRhdGEyID0gdXBsb2FkLnZhbHVlO1xuICAgICAgcmV0dXJuIHsgZGF0YTogZGF0YTIsIGVycm9yOiBudWxsIH07XG4gICAgfVxuICAgIGNvbnN0IHJlYXNvbiA9IHVwbG9hZC5yZWFzb247XG4gICAgY29uc3QgZXJyb3IgPSBVcGxvYWRUaGluZ0Vycm9yLnRvT2JqZWN0KHJlYXNvbik7XG4gICAgcmV0dXJuIHsgZGF0YTogbnVsbCwgZXJyb3IgfTtcbiAgfSk7XG59O1xuXG4vLyBzcmMvc2RrL2luZGV4LnRzXG52YXIgVVRBcGkgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICB0aGlzLmZldGNoID0gKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZmV0Y2gpID8/IGdsb2JhbFRoaXMuZmV0Y2g7XG4gICAgdGhpcy5hcGlLZXkgPSAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5hcGlLZXkpID8/IHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVDtcbiAgICB0aGlzLmRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBcIngtdXBsb2FkdGhpbmctYXBpLWtleVwiOiB0aGlzLmFwaUtleSxcbiAgICAgIFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCI6IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICB9O1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGdldEFwaUtleU9yVGhyb3codGhpcy5hcGlLZXkpO1xuICAgIGluY29tcGF0aWJsZU5vZGVHdWFyZCgpO1xuICB9XG4gIGFzeW5jIHJlcXVlc3RVcGxvYWRUaGluZyhwYXRobmFtZSwgYm9keSwgZmFsbGJhY2tFcnJvck1lc3NhZ2UpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyKHBhdGhuYW1lKSwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGNhY2hlOiBcIm5vLXN0b3JlXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmRlZmF1bHRIZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBpZiAoIXJlcy5vayB8fCBcImVycm9yXCIgaW4ganNvbikge1xuICAgICAgY29uc29sZS5lcnJvcihcIltVVF0gRXJyb3I6XCIsIGpzb24pO1xuICAgICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgICAgbWVzc2FnZTogXCJlcnJvclwiIGluIGpzb24gJiYgdHlwZW9mIGpzb24uZXJyb3IgPT09IFwic3RyaW5nXCIgPyBqc29uLmVycm9yIDogZmFsbGJhY2tFcnJvck1lc3NhZ2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtGaWxlRXNxdWUgfCBGaWxlRXNxdWVbXX0gZmlsZXMgVGhlIGZpbGUocykgdG8gdXBsb2FkXG4gICAqIEBwYXJhbSB7SnNvbn0gbWV0YWRhdGEgSlNPTi1wYXJzZWFibGUgbWV0YWRhdGEgdG8gYXR0YWNoIHRvIHRoZSB1cGxvYWRlZCBmaWxlKHMpXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IHVwbG9hZEZpbGVzKG5ldyBGaWxlKFtcImZvb1wiXSwgXCJmb28udHh0XCIpKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgdXBsb2FkRmlsZXMoW1xuICAgKiAgIG5ldyBGaWxlKFtcImZvb1wiXSwgXCJmb28udHh0XCIpLFxuICAgKiAgIG5ldyBGaWxlKFtcImJhclwiXSwgXCJiYXIudHh0XCIpLFxuICAgKiBdKTtcbiAgICovXG4gIGFzeW5jIHVwbG9hZEZpbGVzKGZpbGVzLCBvcHRzKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgY29uc3QgZmlsZXNUb1VwbG9hZCA9IEFycmF5LmlzQXJyYXkoZmlsZXMpID8gZmlsZXMgOiBbZmlsZXNdO1xuICAgIGNvbnN0IHVwbG9hZHMgPSBhd2FpdCB1cGxvYWRGaWxlc0ludGVybmFsKFxuICAgICAge1xuICAgICAgICBmaWxlczogZmlsZXNUb1VwbG9hZCxcbiAgICAgICAgbWV0YWRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLm1ldGFkYXRhKSA/PyB7fSxcbiAgICAgICAgY29udGVudERpc3Bvc2l0aW9uOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5jb250ZW50RGlzcG9zaXRpb24pID8/IFwiaW5saW5lXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgICAgICB1dFJlcXVlc3RIZWFkZXJzOiB0aGlzLmRlZmF1bHRIZWFkZXJzXG4gICAgICB9XG4gICAgKTtcbiAgICBjb25zdCB1cGxvYWRGaWxlUmVzcG9uc2UgPSBBcnJheS5pc0FycmF5KGZpbGVzKSA/IHVwbG9hZHMgOiB1cGxvYWRzWzBdO1xuICAgIHJldHVybiB1cGxvYWRGaWxlUmVzcG9uc2U7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCBvZiB0aGUgZmlsZSB0byB1cGxvYWRcbiAgICogQHBhcmFtIHtKc29ufSBtZXRhZGF0YSBKU09OLXBhcnNlYWJsZSBtZXRhZGF0YSB0byBhdHRhY2ggdG8gdGhlIHVwbG9hZGVkIGZpbGUocylcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgdXBsb2FkRmlsZUZyb21VcmwoXCJodHRwczovL3VwbG9hZHRoaW5nLmNvbS9mLzJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIik7XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IHVwbG9hZEZpbGVGcm9tVXJsKFtcbiAgICogICBcImh0dHBzOi8vdXBsb2FkdGhpbmcuY29tL2YvMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFxuICAgKiAgIFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8xNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiXG4gICAqIF0pXG4gICAqL1xuICBhc3luYyB1cGxvYWRGaWxlc0Zyb21VcmwodXJscywgb3B0cykge1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGNvbnN0IGZpbGVVcmxzID0gQXJyYXkuaXNBcnJheSh1cmxzKSA/IHVybHMgOiBbdXJsc107XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoXCJtZXRhZGF0YVwiLCBKU09OLnN0cmluZ2lmeSgob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5tZXRhZGF0YSkgPz8ge30pKTtcbiAgICBjb25zdCBmaWxlc1RvVXBsb2FkID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBmaWxlVXJscy5tYXAoYXN5bmMgKHVybCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICB1cmwgPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gdXJsLnBhdGhuYW1lLnNwbGl0KFwiL1wiKS5wb3AoKSA/PyBcInVua25vd24tZmlsZW5hbWVcIjtcbiAgICAgICAgY29uc3QgZmlsZVJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICAgICAgaWYgKCFmaWxlUmVzcG9uc2Uub2spIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcjIoe1xuICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gZG93bmxvYWQgcmVxdWVzdGVkIGZpbGUuXCIsXG4gICAgICAgICAgICBjYXVzZTogZmlsZVJlc3BvbnNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IGZpbGVSZXNwb25zZS5ibG9iKCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGJsb2IsIHsgbmFtZTogZmlsZW5hbWUgfSk7XG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc3QgdXBsb2FkcyA9IGF3YWl0IHVwbG9hZEZpbGVzSW50ZXJuYWwoXG4gICAgICB7XG4gICAgICAgIGZpbGVzOiBmaWxlc1RvVXBsb2FkLFxuICAgICAgICBtZXRhZGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMubWV0YWRhdGEpID8/IHt9LFxuICAgICAgICBjb250ZW50RGlzcG9zaXRpb246IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmNvbnRlbnREaXNwb3NpdGlvbikgPz8gXCJpbmxpbmVcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIHV0UmVxdWVzdEhlYWRlcnM6IHRoaXMuZGVmYXVsdEhlYWRlcnNcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IHVwbG9hZEZpbGVSZXNwb25zZSA9IEFycmF5LmlzQXJyYXkodXJscykgPyB1cGxvYWRzIDogdXBsb2Fkc1swXTtcbiAgICByZXR1cm4gdXBsb2FkRmlsZVJlc3BvbnNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGRlbGV0ZSBmaWxlcyBmcm9tIFVwbG9hZFRoaW5nIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW119IGZpbGVLZXlzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IGRlbGV0ZUZpbGVzKFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgZGVsZXRlRmlsZXMoW1wiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFwiMTY0OTM1M2ItMDRlYS00OGEyLTlkYjctMzFkZTdmNTYyYzhkX2ltYWdlMi5qcGdcIl0pXG4gICAqL1xuICBhc3luYyBkZWxldGVGaWxlcyhmaWxlS2V5cykge1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlS2V5cykpXG4gICAgICBmaWxlS2V5cyA9IFtmaWxlS2V5c107XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFxuICAgICAgXCIvYXBpL2RlbGV0ZUZpbGVcIixcbiAgICAgIHsgZmlsZUtleXMgfSxcbiAgICAgIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIGRlbGV0aW5nIGZpbGVzLlwiXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUmVxdWVzdCBmaWxlIFVSTHMgZnJvbSBVcGxvYWRUaGluZyBzdG9yYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHN0cmluZ1tdfSBmaWxlS2V5c1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RmlsZVVybHMoXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIpO1xuICAgKiBjb25zb2xlLmxvZyhkYXRhKTsgLy8gW3trZXk6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCB1cmw6IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8yZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCJ9XVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RmlsZVVybHMoW1wiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFwiMTY0OTM1M2ItMDRlYS00OGEyLTlkYjctMzFkZTdmNTYyYzhkX2ltYWdlMi5qcGdcIl0pXG4gICAqIGNvbnNvbGUubG9nKGRhdGEpIC8vIFt7a2V5OiBcIjJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIiwgdXJsOiBcImh0dHBzOi8vdXBsb2FkdGhpbmcuY29tL2YvMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiIH0se2tleTogXCIxNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiLCB1cmw6IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8xNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wifV1cbiAgICovXG4gIGFzeW5jIGdldEZpbGVVcmxzKGZpbGVLZXlzKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVLZXlzKSlcbiAgICAgIGZpbGVLZXlzID0gW2ZpbGVLZXlzXTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXG4gICAgICBcIi9hcGkvZ2V0RmlsZVVybFwiLFxuICAgICAgeyBmaWxlS2V5cyB9LFxuICAgICAgXCJBbiB1bmtub3duIGVycm9yIG9jY3VyZWQgd2hpbGUgcmV0cmlldmluZyBmaWxlIFVSTHMuXCJcbiAgICApO1xuICAgIHJldHVybiBqc29uLmRhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFJlcXVlc3QgZmlsZSBsaXN0IGZyb20gVXBsb2FkVGhpbmcgc3RvcmFnZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9wdHMubGltaXQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGZpbGVzIHRvIHJldHVyblxuICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5vZmZzZXQgVGhlIG51bWJlciBvZiBmaWxlcyB0byBza2lwXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGRhdGEgPSBhd2FpdCBsaXN0RmlsZXMoeyBsaW1pdDogMSB9KTtcbiAgICogY29uc29sZS5sb2coZGF0YSk7IC8vIHsga2V5OiBcIjJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIiwgaWQ6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4XCIgfVxuICAgKi9cbiAgYXN5bmMgbGlzdEZpbGVzKG9wdHMpIHtcbiAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXCIvYXBpL2xpc3RGaWxlc1wiLCBvcHRzLCBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJlZCB3aGlsZSBsaXN0aW5nIGZpbGVzLlwiKTtcbiAgICByZXR1cm4ganNvbi5maWxlcztcbiAgfVxuICBhc3luYyByZW5hbWVGaWxlKHVwZGF0ZXMpIHtcbiAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodXBkYXRlcykpXG4gICAgICB1cGRhdGVzID0gW3VwZGF0ZXNdO1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RVcGxvYWRUaGluZyhcbiAgICAgIFwiL2FwaS9yZW5hbWVGaWxlXCIsXG4gICAgICB7IHVwZGF0ZXMgfSxcbiAgICAgIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIHJlbmFtaW5nIGZpbGVzLlwiXG4gICAgKTtcbiAgfVxuICBhc3luYyBnZXRVc2FnZUluZm8oKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFxuICAgICAgXCIvYXBpL2dldFVzYWdlSW5mb1wiLFxuICAgICAge30sXG4gICAgICBcIkFuIHVua25vd24gZXJyb3Igb2NjdXJlZCB3aGlsZSBnZXR0aW5nIHVzYWdlIGluZm8uXCJcbiAgICApO1xuICB9XG59O1xuXG4vLyBzcmMvc2VydmVyLnRzXG52YXIgY3JlYXRlVXBsb2FkdGhpbmcgPSAob3B0cykgPT4gY3JlYXRlQnVpbGRlcihvcHRzKTtcbnZhciBjcmVhdGVTZXJ2ZXJIYW5kbGVyID0gKG9wdHMpID0+IHtcbiAgaW5jb21wYXRpYmxlTm9kZUd1YXJkKCk7XG4gIGNvbnN0IHJlcXVlc3RIYW5kbGVyID0gYnVpbGRSZXF1ZXN0SGFuZGxlcihvcHRzKTtcbiAgY29uc3QgUE9TVCA9IGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgcmVxID0gcmVxdWVzdCBpbnN0YW5jZW9mIFJlcXVlc3QgPyByZXF1ZXN0IDogcmVxdWVzdC5yZXF1ZXN0O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdEhhbmRsZXIoeyByZXEgfSk7XG4gICAgaWYgKHJlc3BvbnNlIGluc3RhbmNlb2YgVXBsb2FkVGhpbmdFcnJvcjMpIHtcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZm9ybWF0RXJyb3IocmVzcG9uc2UsIG9wdHMucm91dGVyKSksIHtcbiAgICAgICAgc3RhdHVzOiBnZXRTdGF0dXNDb2RlRnJvbUVycm9yKHJlc3BvbnNlKSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCI6IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShcIkFuIHVua25vd24gZXJyb3Igb2NjdXJlZFwiLCB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIjogVVBMT0FEVEhJTkdfVkVSU0lPTlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShyZXNwb25zZS5ib2R5KSwge1xuICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCI6IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0QnVpbGRQZXJtcyA9IGJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlcihvcHRzKTtcbiAgY29uc3QgR0VUID0gKHJlcXVlc3QpID0+IHtcbiAgICBjb25zdCBfcmVxID0gcmVxdWVzdCBpbnN0YW5jZW9mIFJlcXVlc3QgPyByZXF1ZXN0IDogcmVxdWVzdC5yZXF1ZXN0O1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZ2V0QnVpbGRQZXJtcygpKSwge1xuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCI6IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHsgR0VULCBQT1NUIH07XG59O1xudmFyIGV4dHJhY3RSb3V0ZXJDb25maWcgPSAocm91dGVyKSA9PiBidWlsZFBlcm1pc3Npb25zSW5mb0hhbmRsZXIoeyByb3V0ZXIgfSkoKTtcblxuZXhwb3J0IHtcbiAgVVRBcGksXG4gIGNyZWF0ZVVwbG9hZHRoaW5nLFxuICBjcmVhdGVTZXJ2ZXJIYW5kbGVyLFxuICBleHRyYWN0Um91dGVyQ29uZmlnXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstUTU0SjNOU0EubWpzLm1hcCJdLCJuYW1lcyI6WyJ1cGxvYWRQYXJ0IiwiaW5jb21wYXRpYmxlTm9kZUd1YXJkIiwiVVBMT0FEVEhJTkdfVkVSU0lPTiIsImJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlciIsImJ1aWxkUmVxdWVzdEhhbmRsZXIiLCJjcmVhdGVCdWlsZGVyIiwiZm9ybWF0RXJyb3IiLCJnZXRTdGF0dXNDb2RlRnJvbUVycm9yIiwiVXBsb2FkVGhpbmdFcnJvciIsIlVwbG9hZFRoaW5nRXJyb3IzIiwiZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTCIsImdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyIiwiVXBsb2FkVGhpbmdFcnJvcjIiLCJwb2xsRm9yRmlsZURhdGEiLCJndWFyZFNlcnZlck9ubHkiLCJjb2RlIiwibWVzc2FnZSIsImdldEFwaUtleU9yVGhyb3ciLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiVVBMT0FEVEhJTkdfU0VDUkVUIiwidXBsb2FkRmlsZXNJbnRlcm5hbCIsImRhdGEiLCJvcHRzIiwiZmlsZURhdGEiLCJmaWxlcyIsIm1hcCIsImZpbGUiLCJuYW1lIiwidHlwZSIsInNpemUiLCJyZXMiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJ1dFJlcXVlc3RIZWFkZXJzIiwiY2FjaGUiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGFkYXRhIiwiY29udGVudERpc3Bvc2l0aW9uIiwib2siLCJlcnJvciIsImZyb21SZXNwb25zZSIsImNsb25lZFJlcyIsImNsb25lIiwianNvbiIsInVwbG9hZHMiLCJQcm9taXNlIiwiYWxsU2V0dGxlZCIsImkiLCJwcmVzaWduZWRVcmxzIiwia2V5IiwiZmlsZVVybCIsInVwbG9hZElkIiwiY2h1bmtTaXplIiwiQXJyYXkiLCJpc0FycmF5IiwiY2F1c2UiLCJldGFncyIsImFsbCIsInVybCIsImluZGV4Iiwib2Zmc2V0IiwiZW5kIiwiTWF0aCIsIm1pbiIsImNodW5rIiwic2xpY2UiLCJldGFnIiwiY29udGVudFR5cGUiLCJmaWxlTmFtZSIsIm1heFJldHJpZXMiLCJ0YWciLCJwYXJ0TnVtYmVyIiwiZmlsZUtleSIsInNka1ZlcnNpb24iLCJ1cGxvYWQiLCJzdGF0dXMiLCJkYXRhMiIsInZhbHVlIiwicmVhc29uIiwidG9PYmplY3QiLCJVVEFwaSIsImNvbnN0cnVjdG9yIiwiZ2xvYmFsVGhpcyIsImRlZmF1bHRIZWFkZXJzIiwicmVxdWVzdFVwbG9hZFRoaW5nIiwicGF0aG5hbWUiLCJmYWxsYmFja0Vycm9yTWVzc2FnZSIsImNvbnNvbGUiLCJ1cGxvYWRGaWxlcyIsImZpbGVzVG9VcGxvYWQiLCJ1cGxvYWRGaWxlUmVzcG9uc2UiLCJ1cGxvYWRGaWxlc0Zyb21VcmwiLCJ1cmxzIiwiZmlsZVVybHMiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiVVJMIiwiZmlsZW5hbWUiLCJzcGxpdCIsInBvcCIsImZpbGVSZXNwb25zZSIsImJsb2IiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWxldGVGaWxlcyIsImZpbGVLZXlzIiwiZ2V0RmlsZVVybHMiLCJsaXN0RmlsZXMiLCJyZW5hbWVGaWxlIiwidXBkYXRlcyIsImdldFVzYWdlSW5mbyIsImNyZWF0ZVVwbG9hZHRoaW5nIiwiY3JlYXRlU2VydmVySGFuZGxlciIsInJlcXVlc3RIYW5kbGVyIiwiUE9TVCIsInJlcXVlc3QiLCJyZXEiLCJSZXF1ZXN0IiwicmVzcG9uc2UiLCJSZXNwb25zZSIsInJvdXRlciIsImdldEJ1aWxkUGVybXMiLCJHRVQiLCJfcmVxIiwiZXh0cmFjdFJvdXRlckNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n    const s3Res = await opts.fetch(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": [\n                opts.contentDisposition,\n                `filename=\"${encodeURI(opts.fileName)}\"`,\n                `filename*=UTF-8''${encodeURI(opts.fileName)}`\n            ].join(\"; \")\n        }\n    });\n    if (s3Res.ok) {\n        const etag = s3Res.headers.get(\"Etag\");\n        if (!etag) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Missing Etag header from uploaded part\"\n            });\n        }\n        return etag.replace(/\"/g, \"\");\n    }\n    if (retryCount < opts.maxRetries) {\n        const delay = 2 ** retryCount * 1e3;\n        await new Promise((r)=>setTimeout(r, delay));\n        return uploadPart(opts, retryCount++);\n    }\n    await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: opts.key\n        }),\n        headers: opts.utRequestHeaders\n    });\n    const text = await s3Res.text();\n    const parsed = maybeParseResponseXML(text);\n    if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message\n        });\n    }\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to upload file to storage provider\",\n        cause: s3Res\n    });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", [\n            opts.contentDisposition,\n            `filename=\"${encodeURI(opts.fileName)}\"`,\n            `filename*=UTF-8''${encodeURI(opts.fileName)}`\n        ].join(\"; \"));\n        xhr.onload = async ()=>{\n            if (xhr.status >= 200 && xhr.status < 300) {\n                const etag = xhr.getResponseHeader(\"Etag\");\n                etag ? resolve(etag) : reject(\"NO ETAG\");\n            } else if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 1e3;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        let lastProgress = 0;\n        xhr.onerror = async ()=>{\n            lastProgress = 0;\n            if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 100;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        xhr.upload.onprogress = (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        };\n        xhr.send(opts.chunk);\n    });\n}\n //# sourceMappingURL=chunk-S3R3VXRK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1TM1IzVlhSSy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDZCQUE2QjtBQUNrRDtBQUUvRSxrQ0FBa0M7QUFDbEMsSUFBSUUsd0JBQXdCLENBQUNDO0lBQzNCLE1BQU1DLFlBQVlELFNBQVNFLEtBQUssQ0FBQztJQUNqQyxNQUFNQyxlQUFlSCxTQUFTRSxLQUFLLENBQUM7SUFDcEMsTUFBTUUsT0FBT0gsYUFBYSxPQUFPLEtBQUssSUFBSUEsU0FBUyxDQUFDLEVBQUU7SUFDdEQsTUFBTUksVUFBVUYsZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxZQUFZLENBQUMsRUFBRTtJQUMvRCxJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsU0FDWixPQUFPO0lBQ1QsT0FBTztRQUFFRCxNQUFNRSx1QkFBdUIsQ0FBQ0YsS0FBSyxJQUFJRztRQUFvQkY7SUFBUTtBQUM5RTtBQUNBLElBQUlFLHFCQUFxQjtBQUN6QixJQUFJRCwwQkFBMEI7SUFDNUJFLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEJDLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEJDLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEJDLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEJDLHFDQUFxQztJQUNyQyxrQkFBa0I7SUFDbEJDLGVBQWU7SUFDZiw0QkFBNEI7SUFDNUJDLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEJDLDBCQUEwQjtBQUU1QjtBQUVBLDZCQUE2QjtBQUM3QixlQUFlQyxXQUFXQyxJQUFJLEVBQUVDLGFBQWEsQ0FBQztJQUM1QyxNQUFNQyxRQUFRLE1BQU1GLEtBQUtHLEtBQUssQ0FBQ0gsS0FBS0ksR0FBRyxFQUFFO1FBQ3ZDQyxRQUFRO1FBQ1JDLE1BQU1OLEtBQUtPLEtBQUs7UUFDaEJDLFNBQVM7WUFDUCxnQkFBZ0JSLEtBQUtTLFdBQVc7WUFDaEMsdUJBQXVCO2dCQUNyQlQsS0FBS1Usa0JBQWtCO2dCQUN2QixDQUFDLFVBQVUs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Z0JBQzNDLE1BQU1ZLHVCQUF1Qi9CLE1BQU1DLGFBQWE7WUFDbEQsT0FBTztnQkFDTGdDLE9BQU87WUFDVDtRQUNGO1FBQ0FDLElBQUlhLE1BQU0sQ0FBQ0MsVUFBVSxHQUFHLENBQUNDO1lBQ3ZCLE1BQU1DLFFBQVFELEVBQUVFLE1BQU0sR0FBR047WUFDekJBLGdCQUFnQks7WUFDaEJsRCxLQUFLb0QsVUFBVSxDQUFDRjtRQUNsQjtRQUNBaEIsSUFBSW1CLElBQUksQ0FBQ3JELEtBQUtPLEtBQUs7SUFDckI7QUFDRjtBQU1FLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbS1jaGF0LWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstUzNSM1ZYUksubWpzP2E0NGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL211bHRpLXBhcnQudHNcbmltcG9ydCB7IGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwsIFVwbG9hZFRoaW5nRXJyb3IgfSBmcm9tIFwiQHVwbG9hZHRoaW5nL3NoYXJlZFwiO1xuXG4vLyBzcmMvaW50ZXJuYWwvczMtZXJyb3ItcGFyc2VyLnRzXG52YXIgbWF5YmVQYXJzZVJlc3BvbnNlWE1MID0gKG1heWJlWG1sKSA9PiB7XG4gIGNvbnN0IGNvZGVNYXRjaCA9IG1heWJlWG1sLm1hdGNoKC88Q29kZT4oLio/KTxcXC9Db2RlPi9zKTtcbiAgY29uc3QgbWVzc2FnZU1hdGNoID0gbWF5YmVYbWwubWF0Y2goLzxNZXNzYWdlPiguKj8pPFxcL01lc3NhZ2U+L3MpO1xuICBjb25zdCBjb2RlID0gY29kZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBjb2RlTWF0Y2hbMV07XG4gIGNvbnN0IG1lc3NhZ2UgPSBtZXNzYWdlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1lc3NhZ2VNYXRjaFsxXTtcbiAgaWYgKCFjb2RlIHx8ICFtZXNzYWdlKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4geyBjb2RlOiBzM0NvZGVUb1VwbG9hZFRoaW5nQ29kZVtjb2RlXSA/PyBERUZBVUxUX0VSUk9SX0NPREUsIG1lc3NhZ2UgfTtcbn07XG52YXIgREVGQVVMVF9FUlJPUl9DT0RFID0gXCJVUExPQURfRkFJTEVEXCI7XG52YXIgczNDb2RlVG9VcGxvYWRUaGluZ0NvZGUgPSB7XG4gIEFjY2Vzc0RlbmllZDogXCJGT1JCSURERU5cIixcbiAgLy8gNDAzIEZvcmJpZGRlblxuICBFbnRpdHlUb29TbWFsbDogXCJUT09fU01BTExcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEVudGl0eVRvb0xhcmdlOiBcIlRPT19MQVJHRVwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgRXhwaXJlZFRva2VuOiBcIkZPUkJJRERFTlwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgSW5jb3JyZWN0TnVtYmVyT2ZGaWxlc0luUG9zdFJlcXVlc3Q6IFwiVE9PX01BTllfRklMRVNcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEludGVybmFsRXJyb3I6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG4gIC8vIDUwMCBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcbiAgS2V5VG9vTG9uZ0Vycm9yOiBcIktFWV9UT09fTE9OR1wiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgTWF4TWVzc2FnZUxlbmd0aEV4Y2VlZGVkOiBcIlRPT19MQVJHRVwiXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxufTtcblxuLy8gc3JjL2ludGVybmFsL211bHRpLXBhcnQudHNcbmFzeW5jIGZ1bmN0aW9uIHVwbG9hZFBhcnQob3B0cywgcmV0cnlDb3VudCA9IDApIHtcbiAgY29uc3QgczNSZXMgPSBhd2FpdCBvcHRzLmZldGNoKG9wdHMudXJsLCB7XG4gICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgIGJvZHk6IG9wdHMuY2h1bmssXG4gICAgaGVhZGVyczoge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogb3B0cy5jb250ZW50VHlwZSxcbiAgICAgIFwiQ29udGVudC1EaXNwb3NpdGlvblwiOiBbXG4gICAgICAgIG9wdHMuY29udGVudERpc3Bvc2l0aW9uLFxuICAgICAgICBgZmlsZW5hbWU9XCIke2VuY29kZVVSSShvcHRzLmZpbGVOYW1lKX1cImAsXG4gICAgICAgIGBmaWxlbmFtZSo9VVRGLTgnJyR7ZW5jb2RlVVJJKG9wdHMuZmlsZU5hbWUpfWBcbiAgICAgIF0uam9pbihcIjsgXCIpXG4gICAgfVxuICB9KTtcbiAgaWYgKHMzUmVzLm9rKSB7XG4gICAgY29uc3QgZXRhZyA9IHMzUmVzLmhlYWRlcnMuZ2V0KFwiRXRhZ1wiKTtcbiAgICBpZiAoIWV0YWcpIHtcbiAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBFdGFnIGhlYWRlciBmcm9tIHVwbG9hZGVkIHBhcnRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBldGFnLnJlcGxhY2UoL1wiL2csIFwiXCIpO1xuICB9XG4gIGlmIChyZXRyeUNvdW50IDwgb3B0cy5tYXhSZXRyaWVzKSB7XG4gICAgY29uc3QgZGVsYXkgPSAyICoqIHJldHJ5Q291bnQgKiAxZTM7XG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHIpID0+IHNldFRpbWVvdXQociwgZGVsYXkpKTtcbiAgICByZXR1cm4gdXBsb2FkUGFydChvcHRzLCByZXRyeUNvdW50KyspO1xuICB9XG4gIGF3YWl0IG9wdHMuZmV0Y2goZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTChcIi9hcGkvZmFpbHVyZUNhbGxiYWNrXCIpLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBmaWxlS2V5OiBvcHRzLmtleVxuICAgIH0pLFxuICAgIGhlYWRlcnM6IG9wdHMudXRSZXF1ZXN0SGVhZGVyc1xuICB9KTtcbiAgY29uc3QgdGV4dCA9IGF3YWl0IHMzUmVzLnRleHQoKTtcbiAgY29uc3QgcGFyc2VkID0gbWF5YmVQYXJzZVJlc3BvbnNlWE1MKHRleHQpO1xuICBpZiAocGFyc2VkID09IG51bGwgPyB2b2lkIDAgOiBwYXJzZWQubWVzc2FnZSkge1xuICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgIGNvZGU6IFwiVVBMT0FEX0ZBSUxFRFwiLFxuICAgICAgbWVzc2FnZTogcGFyc2VkLm1lc3NhZ2VcbiAgICB9KTtcbiAgfVxuICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gdXBsb2FkIGZpbGUgdG8gc3RvcmFnZSBwcm92aWRlclwiLFxuICAgIGNhdXNlOiBzM1Jlc1xuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHVwbG9hZFBhcnRXaXRoUHJvZ3Jlc3Mob3B0cywgcmV0cnlDb3VudCA9IDApIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihcIlBVVFwiLCBvcHRzLnVybCwgdHJ1ZSk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgb3B0cy5maWxlVHlwZSk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICBcIkNvbnRlbnQtRGlzcG9zaXRpb25cIixcbiAgICAgIFtcbiAgICAgICAgb3B0cy5jb250ZW50RGlzcG9zaXRpb24sXG4gICAgICAgIGBmaWxlbmFtZT1cIiR7ZW5jb2RlVVJJKG9wdHMuZmlsZU5hbWUpfVwiYCxcbiAgICAgICAgYGZpbGVuYW1lKj1VVEYtOCcnJHtlbmNvZGVVUkkob3B0cy5maWxlTmFtZSl9YFxuICAgICAgXS5qb2luKFwiOyBcIilcbiAgICApO1xuICAgIHhoci5vbmxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICBjb25zdCBldGFnID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiRXRhZ1wiKTtcbiAgICAgICAgZXRhZyA/IHJlc29sdmUoZXRhZykgOiByZWplY3QoXCJOTyBFVEFHXCIpO1xuICAgICAgfSBlbHNlIGlmIChyZXRyeUNvdW50IDwgb3B0cy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gTWF0aC5wb3coMiwgcmV0cnlDb3VudCkgKiAxZTM7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBkZWxheSkpO1xuICAgICAgICBhd2FpdCB1cGxvYWRQYXJ0V2l0aFByb2dyZXNzKG9wdHMsIHJldHJ5Q291bnQgKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChcIk1heCByZXRyaWVzIGV4Y2VlZGVkXCIpO1xuICAgICAgfVxuICAgIH07XG4gICAgbGV0IGxhc3RQcm9ncmVzcyA9IDA7XG4gICAgeGhyLm9uZXJyb3IgPSBhc3luYyAoKSA9PiB7XG4gICAgICBsYXN0UHJvZ3Jlc3MgPSAwO1xuICAgICAgaWYgKHJldHJ5Q291bnQgPCBvcHRzLm1heFJldHJpZXMpIHtcbiAgICAgICAgY29uc3QgZGVsYXkgPSBNYXRoLnBvdygyLCByZXRyeUNvdW50KSAqIDEwMDtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlcykgPT4gc2V0VGltZW91dChyZXMsIGRlbGF5KSk7XG4gICAgICAgIGF3YWl0IHVwbG9hZFBhcnRXaXRoUHJvZ3Jlc3Mob3B0cywgcmV0cnlDb3VudCArIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KFwiTWF4IHJldHJpZXMgZXhjZWVkZWRcIik7XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgZGVsdGEgPSBlLmxvYWRlZCAtIGxhc3RQcm9ncmVzcztcbiAgICAgIGxhc3RQcm9ncmVzcyArPSBkZWx0YTtcbiAgICAgIG9wdHMub25Qcm9ncmVzcyhkZWx0YSk7XG4gICAgfTtcbiAgICB4aHIuc2VuZChvcHRzLmNodW5rKTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7XG4gIG1heWJlUGFyc2VSZXNwb25zZVhNTCxcbiAgdXBsb2FkUGFydCxcbiAgdXBsb2FkUGFydFdpdGhQcm9ncmVzc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVMzUjNWWFJLLm1qcy5tYXAiXSwibmFtZXMiOlsiZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTCIsIlVwbG9hZFRoaW5nRXJyb3IiLCJtYXliZVBhcnNlUmVzcG9uc2VYTUwiLCJtYXliZVhtbCIsImNvZGVNYXRjaCIsIm1hdGNoIiwibWVzc2FnZU1hdGNoIiwiY29kZSIsIm1lc3NhZ2UiLCJzM0NvZGVUb1VwbG9hZFRoaW5nQ29kZSIsIkRFRkFVTFRfRVJST1JfQ09ERSIsIkFjY2Vzc0RlbmllZCIsIkVudGl0eVRvb1NtYWxsIiwiRW50aXR5VG9vTGFyZ2UiLCJFeHBpcmVkVG9rZW4iLCJJbmNvcnJlY3ROdW1iZXJPZkZpbGVzSW5Qb3N0UmVxdWVzdCIsIkludGVybmFsRXJyb3IiLCJLZXlUb29Mb25nRXJyb3IiLCJNYXhNZXNzYWdlTGVuZ3RoRXhjZWVkZWQiLCJ1cGxvYWRQYXJ0Iiwib3B0cyIsInJldHJ5Q291bnQiLCJzM1JlcyIsImZldGNoIiwidXJsIiwibWV0aG9kIiwiYm9keSIsImNodW5rIiwiaGVhZGVycyIsImNvbnRlbnRUeXBlIiwiY29udGVudERpc3Bvc2l0aW9uIiwiZW5jb2RlVVJJIiwiZmlsZU5hbWUiLCJqb2luIiwib2siLCJldGFnIiwiZ2V0IiwicmVwbGFjZSIsIm1heFJldHJpZXMiLCJkZWxheSIsIlByb21pc2UiLCJyIiwic2V0VGltZW91dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaWxlS2V5Iiwia2V5IiwidXRSZXF1ZXN0SGVhZGVycyIsInRleHQiLCJwYXJzZWQiLCJjYXVzZSIsInVwbG9hZFBhcnRXaXRoUHJvZ3Jlc3MiLCJyZXNvbHZlIiwicmVqZWN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsImZpbGVUeXBlIiwib25sb2FkIiwic3RhdHVzIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJNYXRoIiwicG93IiwicmVzIiwibGFzdFByb2dyZXNzIiwib25lcnJvciIsInVwbG9hZCIsIm9ucHJvZ3Jlc3MiLCJlIiwiZGVsdGEiLCJsb2FkZWQiLCJvblByb2dyZXNzIiwic2VuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UPLOADTHING_VERSION: () => (/* binding */ UPLOADTHING_VERSION),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   buildPermissionsInfoHandler: () => (/* binding */ buildPermissionsInfoHandler),\n/* harmony export */   buildRequestHandler: () => (/* binding */ buildRequestHandler),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   defaultErrorFormatter: () => (/* binding */ defaultErrorFormatter),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   unsetMarker: () => (/* binding */ unsetMarker)\n/* harmony export */ });\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n// package.json\nvar package_default = {\n    name: \"uploadthing\",\n    version: \"6.1.0\",\n    engines: {\n        node: \">=18.13.0\"\n    },\n    license: \"MIT\",\n    exports: {\n        \"./package.json\": \"./package.json\",\n        \"./client\": {\n            types: \"./dist/client.d.ts\",\n            import: \"./dist/client.mjs\",\n            require: \"./dist/client.js\"\n        },\n        \"./server\": {\n            types: \"./dist/server.d.ts\",\n            import: \"./dist/server.mjs\",\n            require: \"./dist/server.js\"\n        },\n        \"./next\": {\n            types: \"./dist/next.d.ts\",\n            import: \"./dist/next.mjs\",\n            require: \"./dist/next.js\"\n        },\n        \"./next-legacy\": {\n            types: \"./dist/next-legacy.d.ts\",\n            import: \"./dist/next-legacy.mjs\",\n            require: \"./dist/next-legacy.js\"\n        },\n        \"./express\": {\n            import: \"./dist/express.mjs\",\n            types: \"./dist/express.d.ts\",\n            require: \"./dist/express.js\"\n        },\n        \"./tw\": {\n            types: \"./dist/tw.d.ts\",\n            import: \"./dist/tw.mjs\",\n            require: \"./dist/tw.js\"\n        },\n        \"./fastify\": {\n            types: \"./dist/fastify.d.ts\",\n            import: \"./dist/fastify.mjs\",\n            require: \"./dist/fastify.js\"\n        },\n        \"./h3\": {\n            types: \"./dist/h3.d.ts\",\n            import: \"./dist/h3.mjs\",\n            require: \"./dist/h3.js\"\n        }\n    },\n    files: [\n        \"dist\"\n    ],\n    publishConfig: {\n        access: \"public\"\n    },\n    typesVersions: {\n        \"*\": {\n            client: [\n                \"dist/client.d.ts\"\n            ],\n            server: [\n                \"dist/server.d.ts\"\n            ],\n            next: [\n                \"dist/next.d.ts\"\n            ],\n            \"next-legacy\": [\n                \"dist/next-legacy.d.ts\"\n            ],\n            tw: [\n                \"dist/tw.d.ts\"\n            ],\n            express: [\n                \"dist/express.d.ts\"\n            ],\n            fastify: [\n                \"dist/fastify.d.ts\"\n            ],\n            h3: [\n                \"dist/h3.d.ts\"\n            ]\n        }\n    },\n    scripts: {\n        lint: 'eslint \"**/*.{ts,tsx}\" --max-warnings 0',\n        build: \"tsup\",\n        clean: \"git clean -xdf dist node_modules\",\n        dev: \"tsup --watch\",\n        test: \"vitest run\",\n        \"test:watch\": \"vitest\",\n        typecheck: \"tsc --noEmit\"\n    },\n    dependencies: {\n        \"@uploadthing/mime-types\": \"^0.2.2\",\n        \"@uploadthing/shared\": \"^6.0.2\"\n    },\n    devDependencies: {\n        \"@types/express\": \"^4.17.17\",\n        \"@types/react\": \"18.2.33\",\n        \"@uploadthing/eslint-config\": \"0.2.0\",\n        \"@uploadthing/tsconfig\": \"0.1.0\",\n        \"@uploadthing/tsup-config\": \"0.1.0\",\n        eslint: \"^8.47.0\",\n        express: \"^4.18.2\",\n        fastify: \"^4.23.2\",\n        h3: \"^1.8.1\",\n        next: \"14.0.1\",\n        \"solid-js\": \"^1.7.11\",\n        tailwindcss: \"^3.3.2\",\n        tsup: \"6.7.0\",\n        \"type-fest\": \"^3.11.1\",\n        typescript: \"^5.1.6\",\n        undici: \"^5.20.0\",\n        vitest: \"^0.30.1\",\n        zod: \"^3.22.3\"\n    },\n    eslintConfig: {\n        root: true,\n        extends: [\n            \"@uploadthing/eslint-config/base\"\n        ]\n    }\n};\n// src/constants.ts\nif (!package_default.version) throw new Error(\"no version found in package.json\");\nvar UPLOADTHING_VERSION = package_default.version;\n// src/internal/error-formatter.ts\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    var _a;\n    const errorFormatter = ((_a = router[Object.keys(router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;\n    return errorFormatter(error);\n}\n// src/internal/types.ts\nvar unsetMarker = \"unsetMarker\";\nvar VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\",\n    \"multipart-complete\"\n];\n// src/internal/handler.ts\n\n// src/internal/dev-hook.ts\n\nvar isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nvar conditionalDevServer = async (opts)=>{\n    if (false) {}\n    const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.pollForFileData)({\n        url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(`/api/pollUpload/${opts.fileKey}`),\n        apiKey: opts.apiKey,\n        sdkVersion: UPLOADTHING_VERSION\n    }, async (json)=>{\n        const file = json.fileData;\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n        const response = await fetch(callbackUrl, {\n            method: \"POST\",\n            body: JSON.stringify({\n                status: \"uploaded\",\n                metadata: JSON.parse(file.metadata ?? \"{}\"),\n                file: {\n                    url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,\n                    key: opts.fileKey,\n                    name: file.fileName,\n                    size: file.fileSize\n                }\n            }),\n            headers: {\n                \"uploadthing-hook\": \"callback\"\n            }\n        });\n        if (isValidResponse(response)) {\n            console.log(\"[UT] Successfully simulated callback for file\", opts.fileKey);\n        } else {\n            console.error(\"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\", opts.fileKey);\n        }\n        return file;\n    });\n    if (fileData !== void 0) return fileData;\n    console.error(`[UT] Failed to simulate callback for file ${opts.fileKey}`);\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"File took too long to upload\"\n    });\n};\n// src/internal/parser.ts\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\n// src/internal/handler.ts\nvar createUTFetch = (apiKey)=>{\n    return async (endpoint, payload)=>{\n        const response = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(endpoint), {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-uploadthing-api-key\": apiKey,\n                \"x-uploadthing-version\": UPLOADTHING_VERSION\n            }\n        });\n        return response;\n    };\n};\nvar fileCountLimitHit = (files, routeConfig)=>{\n    var _a;\n    const counts = {};\n    files.forEach((file)=>{\n        const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getTypeFromFileName)(file.name, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.objectKeys)(routeConfig));\n        if (!counts[type]) {\n            counts[type] = 1;\n        } else {\n            counts[type] += 1;\n        }\n    });\n    for(const _key in counts){\n        const key = _key;\n        const count = counts[key];\n        const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;\n        if (!limit) {\n            console.error(routeConfig, key);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid config during file count\",\n                cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`\n            });\n        }\n        if (count > limit) {\n            return {\n                limitHit: true,\n                type: key,\n                limit,\n                count\n            };\n        }\n    }\n    return {\n        limitHit: false\n    };\n};\nvar getHeader = (req, key)=>{\n    if (req.headers instanceof Headers) {\n        return req.headers.get(key);\n    }\n    return req.headers[key];\n};\nvar buildRequestHandler = (opts)=>{\n    return async (input)=>{\n        var _a;\n        if (true) {\n            console.log(\"[UT] UploadThing dev server is now running!\");\n        }\n        const { req, res, event } = input;\n        const { router, config } = opts;\n        const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;\n        let url;\n        try {\n            url = new URL(input.url ?? req.url ?? \"\");\n        } catch (error) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Invalid url '${((_a = input.url) == null ? void 0 : _a.href) ?? req.url}'`,\n                cause: error\n            });\n        }\n        const params = url.searchParams;\n        const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? void 0;\n        const slug = params.get(\"slug\") ?? void 0;\n        const actionType = params.get(\"actionType\") ?? void 0;\n        if (!slug) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No slug provided\"\n        });\n        if (slug && typeof slug !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: `Expected slug to be of type 'string', got '${typeof slug}'`\n            });\n        }\n        if (actionType && typeof actionType !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`actionType` must be a string\",\n                cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`\n            });\n        }\n        if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`uploadthingHook` must be a string\",\n                cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`\n            });\n        }\n        if (!preferredOrEnvSecret) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n                cause: \"No secret provided\"\n            });\n        }\n        const uploadable = router[slug];\n        if (!uploadable) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: `No file route found for slug ${slug}`\n            });\n        }\n        const utFetch = createUTFetch(preferredOrEnvSecret);\n        if (uploadthingHook === \"callback\") {\n            const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n            if (maybeReqBody instanceof Error) {\n                return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid request body\",\n                    cause: maybeReqBody\n                });\n            }\n            const res2 = await uploadable.resolver({\n                file: maybeReqBody.file,\n                metadata: maybeReqBody.metadata\n            });\n            await utFetch(\"/api/serverCallback\", {\n                fileKey: maybeReqBody.file.key,\n                callbackData: res2 ?? null\n            });\n            return {\n                status: 200\n            };\n        }\n        if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${actionType}`,\n                message: `Expected ${VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${\"a\"}\"`\n            });\n        }\n        switch(actionType){\n            case \"upload\":\n                {\n                    const maybeInput = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeInput instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeInput\n                        });\n                    }\n                    const { files, input: userInput } = maybeInput;\n                    let parsedInput = {};\n                    try {\n                        const inputParser = uploadable._def.inputParser;\n                        parsedInput = await getParseFn(inputParser)(userInput);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid input.\",\n                            cause: error\n                        });\n                    }\n                    let metadata = {};\n                    try {\n                        metadata = await uploadable._def.middleware({\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            req,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            res,\n                            event,\n                            input: parsedInput\n                        });\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run middleware.\",\n                            cause: error\n                        });\n                    }\n                    if (!Array.isArray(files) || !files.every((f)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(f) && typeof f.name === \"string\" && typeof f.size === \"number\")) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Files must be an array of objects with name and size\",\n                        cause: `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(files)}'`\n                    });\n                    let parsedConfig;\n                    try {\n                        parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(uploadable._def.routerConfig);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    try {\n                        const { limitHit, count, limit, type } = fileCountLimitHit(files, parsedConfig);\n                        if (limitHit) {\n                            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"BAD_REQUEST\",\n                                message: \"File limit exceeded\",\n                                cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`\n                            });\n                        }\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    const callbackUrl = resolveCallbackUrl({\n                        config,\n                        req,\n                        url\n                    });\n                    const uploadthingApiResponse = await utFetch(\"/api/prepareUpload\", {\n                        files,\n                        routeConfig: parsedConfig,\n                        metadata,\n                        callbackUrl: callbackUrl.origin + callbackUrl.pathname,\n                        callbackSlug: slug\n                    });\n                    const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                    if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n                        console.error(\"[UT] unable to get presigned urls\");\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    if (true) {\n                        for (const file of parsedResponse){\n                            void conditionalDevServer({\n                                fileKey: file.key,\n                                apiKey: preferredOrEnvSecret\n                            });\n                        }\n                    }\n                    return {\n                        body: parsedResponse.map((x)=>({\n                                ...x,\n                                pollingUrl: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(`/api/serverCallback`)\n                            })),\n                        status: 200\n                    };\n                }\n            case \"multipart-complete\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const completeRes = await utFetch(\"/api/completeMultipart\", {\n                        fileKey: maybeReqBody.fileKey,\n                        uploadId: maybeReqBody.uploadId,\n                        etags: maybeReqBody.etags\n                    });\n                    if (!completeRes.ok) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: \"Failed to complete multipart upload\"\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            case \"failure\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const { fileKey, uploadId } = maybeReqBody;\n                    const uploadthingApiResponse = await utFetch(\"/api/failureCallback\", {\n                        fileKey,\n                        uploadId\n                    });\n                    if (!uploadthingApiResponse.ok) {\n                        console.error(\"[UT] failed to mark upload as failed\");\n                        const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Unable to mark upload as failed\",\n                            cause: parsedResponse\n                        });\n                    }\n                    try {\n                        uploadable._def.onUploadError({\n                            error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"UPLOAD_FAILED\",\n                                message: `Upload failed for ${fileKey}`\n                            }),\n                            fileKey\n                        });\n                    } catch (error) {\n                        console.error(\"[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\");\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run onUploadError callback\",\n                            cause: error\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            default:\n                {\n                    return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: `Invalid action type`\n                    });\n                }\n        }\n    };\n};\nfunction resolveCallbackUrl(opts) {\n    var _a, _b;\n    let callbackUrl = opts.url;\n    if ((_a = opts.config) == null ? void 0 : _a.callbackUrl) {\n        callbackUrl = (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(opts.config.callbackUrl);\n    } else if (process.env.UPLOADTHING_URL) {\n        callbackUrl = (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(process.env.UPLOADTHING_URL);\n    }\n    if (true) {\n        return callbackUrl;\n    }\n    let parsedFromHeaders = (_b = getHeader(opts.req, \"origin\") ?? getHeader(opts.req, \"referer\") ?? getHeader(opts.req, \"host\") ?? getHeader(opts.req, \"x-forwarded-host\")) == null ? void 0 : _b.toString();\n    if (parsedFromHeaders && !parsedFromHeaders.includes(\"http\")) {\n        parsedFromHeaders = (getHeader(opts.req, \"x-forwarded-proto\") ?? \"https\").toString() + \"://\" + parsedFromHeaders;\n    }\n    if (!parsedFromHeaders || parsedFromHeaders.includes(\"localhost\")) {\n        console.warn([\n            \"[UT] [WARN] You are using a localhost callback url in production which is not supported.\",\n            \"Read more and learn how to fix it here: https://uploadthing.com/faq#my-callback-runs-in-development-but-not-in-production\"\n        ].join(\" \"));\n        return callbackUrl;\n    }\n    return (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(parsedFromHeaders);\n}\nvar buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const r = opts.router;\n        const permissions = Object.keys(r).map((k)=>{\n            const route = r[k];\n            const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(route._def.routerConfig);\n            return {\n                slug: k,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n// src/internal/upload-builder.ts\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>({}),\n            _input: {},\n            _output: {}\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n //# sourceMappingURL=chunk-SHB3FCAQ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incompatibleNodeGuard: () => (/* binding */ incompatibleNodeGuard)\n/* harmony export */ });\n// src/internal/incompat-node-guard.ts\nfunction incompatibleNodeGuard() {\n    var _a, _b, _c, _d;\n    if (typeof process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = (_d = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    console.error(`[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`);\n    process.exit(1);\n}\n //# sourceMappingURL=chunk-WPSY3MFJ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNDQUFzQztBQUN0QyxTQUFTQTtJQUNQLElBQUlDLElBQUlDLElBQUlDLElBQUlDO0lBQ2hCLElBQUksT0FBT0MsWUFBWSxhQUNyQjtJQUNGLElBQUlDO0lBQ0osSUFBSUM7SUFDSixNQUFNQyxtQkFBbUIsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLSSxRQUFRSSxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUlSLEdBQUdTLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSVIsR0FBR1MsS0FBSyxDQUFDO0lBQy9HLElBQUlILGtCQUFrQjtRQUNwQixDQUFDRixPQUFPQyxNQUFNLEdBQUdDLGlCQUFpQkksR0FBRyxDQUFDLENBQUNDLElBQU1DLFNBQVNELEdBQUc7SUFDM0Q7SUFDQSxNQUFNRSxnQkFBZ0IsQ0FBQ1osS0FBS0UsUUFBUVcsR0FBRyxLQUFLLE9BQU8sS0FBSyxJQUFJYixHQUFHYyxJQUFJO0lBQ25FLElBQUksQ0FBQ1gsU0FBU1MsZUFBZTtRQUMzQixNQUFNRyxjQUFjLENBQUNkLEtBQUssdUJBQXVCZSxJQUFJLENBQUNKLGNBQWEsS0FBTSxPQUFPLEtBQUssSUFBSVgsRUFBRSxDQUFDLEVBQUU7UUFDOUYsSUFBSWMsYUFBYTtZQUNmLENBQUNaLE9BQU9DLE1BQU0sR0FBR1csWUFBWUUsU0FBUyxDQUFDLEdBQUdULEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUMsU0FBU0QsR0FBRztRQUM5RTtJQUNGO0lBQ0EsSUFBSSxDQUFDUCxTQUFTLENBQUNDLE9BQ2I7SUFDRixJQUFJRCxRQUFRLElBQ1Y7SUFDRixJQUFJQSxVQUFVLE1BQU1DLFNBQVMsSUFDM0I7SUFDRmMsUUFBUUMsS0FBSyxDQUNYLENBQUMsOEJBQThCLEVBQUVoQixNQUFNLENBQUMsRUFBRUMsTUFBTSwrRUFBK0UsQ0FBQztJQUVsSUYsUUFBUWtCLElBQUksQ0FBQztBQUNmO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtLWNoYXQtYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanM/N2I1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW50ZXJuYWwvaW5jb21wYXQtbm9kZS1ndWFyZC50c1xuZnVuY3Rpb24gaW5jb21wYXRpYmxlTm9kZUd1YXJkKCkge1xuICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm47XG4gIGxldCBtYWpvcjtcbiAgbGV0IG1pbm9yO1xuICBjb25zdCBtYXliZU5vZGVWZXJzaW9uID0gKF9iID0gKF9hID0gcHJvY2Vzcy52ZXJzaW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm5vZGUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5zcGxpdChcIi5cIik7XG4gIGlmIChtYXliZU5vZGVWZXJzaW9uKSB7XG4gICAgW21ham9yLCBtaW5vcl0gPSBtYXliZU5vZGVWZXJzaW9uLm1hcCgodikgPT4gcGFyc2VJbnQodiwgMTApKTtcbiAgfVxuICBjb25zdCBtYXliZU5vZGVQYXRoID0gKF9jID0gcHJvY2Vzcy5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYy5OT0RFO1xuICBpZiAoIW1ham9yICYmIG1heWJlTm9kZVBhdGgpIHtcbiAgICBjb25zdCBub2RlVmVyc2lvbiA9IChfZCA9IC92KFxcZCspXFwuKFxcZCspXFwuKFxcZCspLy5leGVjKG1heWJlTm9kZVBhdGgpKSA9PSBudWxsID8gdm9pZCAwIDogX2RbMF07XG4gICAgaWYgKG5vZGVWZXJzaW9uKSB7XG4gICAgICBbbWFqb3IsIG1pbm9yXSA9IG5vZGVWZXJzaW9uLnN1YnN0cmluZygxKS5zcGxpdChcIi5cIikubWFwKCh2KSA9PiBwYXJzZUludCh2LCAxMCkpO1xuICAgIH1cbiAgfVxuICBpZiAoIW1ham9yIHx8ICFtaW5vcilcbiAgICByZXR1cm47XG4gIGlmIChtYWpvciA+IDE4KVxuICAgIHJldHVybjtcbiAgaWYgKG1ham9yID09PSAxOCAmJiBtaW5vciA+PSAxMylcbiAgICByZXR1cm47XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgYFtVVF06IFlPVSBBUkUgVVNJTkcgQSBMRUdBQ1kgKCR7bWFqb3J9LiR7bWlub3J9KSBOT0RFIFZFUlNJT04gV0hJQ0ggSVNOJ1QgT0ZGSUNJQUxMWSBTVVBQT1JURUQuIFBMRUFTRSBVUEdSQURFIFRPIE5PREUgXjE4LjEzLmBcbiAgKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG5leHBvcnQge1xuICBpbmNvbXBhdGlibGVOb2RlR3VhcmRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1XUFNZM01GSi5tanMubWFwIl0sIm5hbWVzIjpbImluY29tcGF0aWJsZU5vZGVHdWFyZCIsIl9hIiwiX2IiLCJfYyIsIl9kIiwicHJvY2VzcyIsIm1ham9yIiwibWlub3IiLCJtYXliZU5vZGVWZXJzaW9uIiwidmVyc2lvbnMiLCJub2RlIiwic3BsaXQiLCJtYXAiLCJ2IiwicGFyc2VJbnQiLCJtYXliZU5vZGVQYXRoIiwiZW52IiwiTk9ERSIsIm5vZGVWZXJzaW9uIiwiZXhlYyIsInN1YnN0cmluZyIsImNvbnNvbGUiLCJlcnJvciIsImV4aXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/next.mjs":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/dist/next.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var _chunk_Q54J3NSA_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-Q54J3NSA.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs\");\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-SHB3FCAQ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs\");\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n\n\n\n\n\n// src/next.ts\nvar createUploadthing = (opts)=>(0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_3__.createBuilder)(opts);\nvar createNextRouteHandler = (opts)=>{\n    const handlers = (0,_chunk_Q54J3NSA_mjs__WEBPACK_IMPORTED_MODULE_0__.createServerHandler)(opts);\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n //# sourceMappingURL=next.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRThCO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFOUIsY0FBYztBQUNkLElBQUlFLG9CQUFvQixDQUFDQyxPQUFTRixrRUFBYUEsQ0FBQ0U7QUFDaEQsSUFBSUMseUJBQXlCLENBQUNEO0lBQzVCLE1BQU1FLFdBQVdMLHdFQUFtQkEsQ0FBQ0c7SUFDckMsT0FBTztRQUNMRyxNQUFNLENBQUNDLE1BQVFGLFNBQVNDLElBQUksQ0FBQ0M7UUFDN0JDLEtBQUssQ0FBQ0QsTUFBUUYsU0FBU0csR0FBRyxDQUFDRDtJQUM3QjtBQUNGO0FBSUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWFtLWNoYXQtYXBwbGljYXRpb24vLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcz9jNTVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNyZWF0ZVNlcnZlckhhbmRsZXJcbn0gZnJvbSBcIi4vY2h1bmstUTU0SjNOU0EubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLVMzUjNWWFJLLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1XUFNZM01GSi5tanNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUJ1aWxkZXJcbn0gZnJvbSBcIi4vY2h1bmstU0hCM0ZDQVEubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLTRQREdWSDU3Lm1qc1wiO1xuXG4vLyBzcmMvbmV4dC50c1xudmFyIGNyZWF0ZVVwbG9hZHRoaW5nID0gKG9wdHMpID0+IGNyZWF0ZUJ1aWxkZXIob3B0cyk7XG52YXIgY3JlYXRlTmV4dFJvdXRlSGFuZGxlciA9IChvcHRzKSA9PiB7XG4gIGNvbnN0IGhhbmRsZXJzID0gY3JlYXRlU2VydmVySGFuZGxlcihvcHRzKTtcbiAgcmV0dXJuIHtcbiAgICBQT1NUOiAocmVxKSA9PiBoYW5kbGVycy5QT1NUKHJlcSksXG4gICAgR0VUOiAocmVxKSA9PiBoYW5kbGVycy5HRVQocmVxKVxuICB9O1xufTtcbmV4cG9ydCB7XG4gIGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIsXG4gIGNyZWF0ZVVwbG9hZHRoaW5nXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dC5tanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZVNlcnZlckhhbmRsZXIiLCJjcmVhdGVCdWlsZGVyIiwiY3JlYXRlVXBsb2FkdGhpbmciLCJvcHRzIiwiY3JlYXRlTmV4dFJvdXRlSGFuZGxlciIsImhhbmRsZXJzIiwiUE9TVCIsInJlcSIsIkdFVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/next.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl)\n/* harmony export */ });\n// src/internal/get-full-api-url.ts\nfunction getFullApiUrl(maybeUrl) {\n  const base = (() => {\n    var _a, _b;\n    if (typeof window !== \"undefined\") {\n      return window.location.origin;\n    }\n    if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n      return `https://${process.env.VERCEL_URL}`;\n    }\n    if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n      return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n    }\n    return \"http://localhost:3000\";\n  })();\n  try {\n    const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n    if (url.pathname === \"/\") {\n      url.pathname = \"/api/uploadthing\";\n    }\n    return url;\n  } catch (err) {\n    throw new Error(\n      `Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`\n    );\n  }\n}\n\n\n//# sourceMappingURL=chunk-4PDGVH57.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0EsY0FBYywyQ0FBZTtBQUM3Qix3QkFBd0IsaUVBQTBCLENBQUM7QUFDbkQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSwwQkFBMEIsU0FBUztBQUNuQztBQUNBO0FBQ0E7O0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RlYW0tY2hhdC1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLTRQREdWSDU3Lm1qcz8yZGY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbnRlcm5hbC9nZXQtZnVsbC1hcGktdXJsLnRzXG5mdW5jdGlvbiBnZXRGdWxsQXBpVXJsKG1heWJlVXJsKSB7XG4gIGNvbnN0IGJhc2UgPSAoKCkgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgKChfYSA9IHByb2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IHByb2Nlc3MuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX2EuVkVSQ0VMX1VSTCkpIHtcbiAgICAgIHJldHVybiBgaHR0cHM6Ly8ke3Byb2Nlc3MuZW52LlZFUkNFTF9VUkx9YDtcbiAgICB9XG4gICAgaWYgKChfYiA9IGltcG9ydC5tZXRhLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLlZFUkNFTF9VUkwpIHtcbiAgICAgIHJldHVybiBgaHR0cHM6Ly8ke2ltcG9ydC5tZXRhLmVudi5WRVJDRUxfVVJMfWA7XG4gICAgfVxuICAgIHJldHVybiBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiO1xuICB9KSgpO1xuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwobWF5YmVVcmwgPz8gXCIvYXBpL3VwbG9hZHRoaW5nXCIsIGJhc2UpO1xuICAgIGlmICh1cmwucGF0aG5hbWUgPT09IFwiL1wiKSB7XG4gICAgICB1cmwucGF0aG5hbWUgPSBcIi9hcGkvdXBsb2FkdGhpbmdcIjtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEZhaWxlZCB0byBwYXJzZSAnJHttYXliZVVybH0nIGFzIGEgVVJMLiBNYWtlIHN1cmUgaXQncyBhIHZhbGlkIFVSTCBvciBwYXRoYFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgZ2V0RnVsbEFwaVVybFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLTRQREdWSDU3Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml) => {\n  const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n  const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n  const code = codeMatch == null ? void 0 : codeMatch[1];\n  const message = messageMatch == null ? void 0 : messageMatch[1];\n  if (!code || !message)\n    return null;\n  return { code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE, message };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n  AccessDenied: \"FORBIDDEN\",\n  // 403 Forbidden\n  EntityTooSmall: \"TOO_SMALL\",\n  // 400 Bad Request\n  EntityTooLarge: \"TOO_LARGE\",\n  // 400 Bad Request\n  ExpiredToken: \"FORBIDDEN\",\n  // 400 Bad Request\n  IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n  // 400 Bad Request\n  InternalError: \"INTERNAL_SERVER_ERROR\",\n  // 500 Internal Server Error\n  KeyTooLongError: \"KEY_TOO_LONG\",\n  // 400 Bad Request\n  MaxMessageLengthExceeded: \"TOO_LARGE\"\n  // 400 Bad Request\n};\n\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n  const s3Res = await opts.fetch(opts.url, {\n    method: \"PUT\",\n    body: opts.chunk,\n    headers: {\n      \"Content-Type\": opts.contentType,\n      \"Content-Disposition\": [\n        opts.contentDisposition,\n        `filename=\"${encodeURI(opts.fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(opts.fileName)}`\n      ].join(\"; \")\n    }\n  });\n  if (s3Res.ok) {\n    const etag = s3Res.headers.get(\"Etag\");\n    if (!etag) {\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Missing Etag header from uploaded part\"\n      });\n    }\n    return etag.replace(/\"/g, \"\");\n  }\n  if (retryCount < opts.maxRetries) {\n    const delay = 2 ** retryCount * 1e3;\n    await new Promise((r) => setTimeout(r, delay));\n    return uploadPart(opts, retryCount++);\n  }\n  await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n    method: \"POST\",\n    body: JSON.stringify({\n      fileKey: opts.key\n    }),\n    headers: opts.utRequestHeaders\n  });\n  const text = await s3Res.text();\n  const parsed = maybeParseResponseXML(text);\n  if (parsed == null ? void 0 : parsed.message) {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n      code: \"UPLOAD_FAILED\",\n      message: parsed.message\n    });\n  }\n  throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n    code: \"UPLOAD_FAILED\",\n    message: \"Failed to upload file to storage provider\",\n    cause: s3Res\n  });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"PUT\", opts.url, true);\n    xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n    xhr.setRequestHeader(\n      \"Content-Disposition\",\n      [\n        opts.contentDisposition,\n        `filename=\"${encodeURI(opts.fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(opts.fileName)}`\n      ].join(\"; \")\n    );\n    xhr.onload = async () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        const etag = xhr.getResponseHeader(\"Etag\");\n        etag ? resolve(etag) : reject(\"NO ETAG\");\n      } else if (retryCount < opts.maxRetries) {\n        const delay = Math.pow(2, retryCount) * 1e3;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1);\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n    let lastProgress = 0;\n    xhr.onerror = async () => {\n      lastProgress = 0;\n      if (retryCount < opts.maxRetries) {\n        const delay = Math.pow(2, retryCount) * 100;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1);\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n    xhr.upload.onprogress = (e) => {\n      const delta = e.loaded - lastProgress;\n      lastProgress += delta;\n      opts.onProgress(delta);\n    };\n    xhr.send(opts.chunk);\n  });\n}\n\n\n//# sourceMappingURL=chunk-S3R3VXRK.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1TM1IzVlhSSy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQytFOztBQUUvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHlCQUF5QjtBQUM5Qyw0QkFBNEIseUJBQXlCO0FBQ3JELGdCQUFnQjtBQUNoQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUVBQWdCO0FBQ2hDO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwyRUFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaUVBQWdCO0FBQzlCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxZQUFZLGlFQUFnQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCO0FBQzlDLDRCQUE0Qix5QkFBeUI7QUFDckQsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFNRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVhbS1jaGF0LWFwcGxpY2F0aW9uLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstUzNSM1ZYUksubWpzP2Q5NTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL211bHRpLXBhcnQudHNcbmltcG9ydCB7IGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwsIFVwbG9hZFRoaW5nRXJyb3IgfSBmcm9tIFwiQHVwbG9hZHRoaW5nL3NoYXJlZFwiO1xuXG4vLyBzcmMvaW50ZXJuYWwvczMtZXJyb3ItcGFyc2VyLnRzXG52YXIgbWF5YmVQYXJzZVJlc3BvbnNlWE1MID0gKG1heWJlWG1sKSA9PiB7XG4gIGNvbnN0IGNvZGVNYXRjaCA9IG1heWJlWG1sLm1hdGNoKC88Q29kZT4oLio/KTxcXC9Db2RlPi9zKTtcbiAgY29uc3QgbWVzc2FnZU1hdGNoID0gbWF5YmVYbWwubWF0Y2goLzxNZXNzYWdlPiguKj8pPFxcL01lc3NhZ2U+L3MpO1xuICBjb25zdCBjb2RlID0gY29kZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBjb2RlTWF0Y2hbMV07XG4gIGNvbnN0IG1lc3NhZ2UgPSBtZXNzYWdlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1lc3NhZ2VNYXRjaFsxXTtcbiAgaWYgKCFjb2RlIHx8ICFtZXNzYWdlKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4geyBjb2RlOiBzM0NvZGVUb1VwbG9hZFRoaW5nQ29kZVtjb2RlXSA/PyBERUZBVUxUX0VSUk9SX0NPREUsIG1lc3NhZ2UgfTtcbn07XG52YXIgREVGQVVMVF9FUlJPUl9DT0RFID0gXCJVUExPQURfRkFJTEVEXCI7XG52YXIgczNDb2RlVG9VcGxvYWRUaGluZ0NvZGUgPSB7XG4gIEFjY2Vzc0RlbmllZDogXCJGT1JCSURERU5cIixcbiAgLy8gNDAzIEZvcmJpZGRlblxuICBFbnRpdHlUb29TbWFsbDogXCJUT09fU01BTExcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEVudGl0eVRvb0xhcmdlOiBcIlRPT19MQVJHRVwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgRXhwaXJlZFRva2VuOiBcIkZPUkJJRERFTlwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgSW5jb3JyZWN0TnVtYmVyT2ZGaWxlc0luUG9zdFJlcXVlc3Q6IFwiVE9PX01BTllfRklMRVNcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEludGVybmFsRXJyb3I6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG4gIC8vIDUwMCBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcbiAgS2V5VG9vTG9uZ0Vycm9yOiBcIktFWV9UT09fTE9OR1wiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgTWF4TWVzc2FnZUxlbmd0aEV4Y2VlZGVkOiBcIlRPT19MQVJHRVwiXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxufTtcblxuLy8gc3JjL2ludGVybmFsL211bHRpLXBhcnQudHNcbmFzeW5jIGZ1bmN0aW9uIHVwbG9hZFBhcnQob3B0cywgcmV0cnlDb3VudCA9IDApIHtcbiAgY29uc3QgczNSZXMgPSBhd2FpdCBvcHRzLmZldGNoKG9wdHMudXJsLCB7XG4gICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgIGJvZHk6IG9wdHMuY2h1bmssXG4gICAgaGVhZGVyczoge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogb3B0cy5jb250ZW50VHlwZSxcbiAgICAgIFwiQ29udGVudC1EaXNwb3NpdGlvblwiOiBbXG4gICAgICAgIG9wdHMuY29udGVudERpc3Bvc2l0aW9uLFxuICAgICAgICBgZmlsZW5hbWU9XCIke2VuY29kZVVSSShvcHRzLmZpbGVOYW1lKX1cImAsXG4gICAgICAgIGBmaWxlbmFtZSo9VVRGLTgnJyR7ZW5jb2RlVVJJKG9wdHMuZmlsZU5hbWUpfWBcbiAgICAgIF0uam9pbihcIjsgXCIpXG4gICAgfVxuICB9KTtcbiAgaWYgKHMzUmVzLm9rKSB7XG4gICAgY29uc3QgZXRhZyA9IHMzUmVzLmhlYWRlcnMuZ2V0KFwiRXRhZ1wiKTtcbiAgICBpZiAoIWV0YWcpIHtcbiAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBFdGFnIGhlYWRlciBmcm9tIHVwbG9hZGVkIHBhcnRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBldGFnLnJlcGxhY2UoL1wiL2csIFwiXCIpO1xuICB9XG4gIGlmIChyZXRyeUNvdW50IDwgb3B0cy5tYXhSZXRyaWVzKSB7XG4gICAgY29uc3QgZGVsYXkgPSAyICoqIHJldHJ5Q291bnQgKiAxZTM7XG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHIpID0+IHNldFRpbWVvdXQociwgZGVsYXkpKTtcbiAgICByZXR1cm4gdXBsb2FkUGFydChvcHRzLCByZXRyeUNvdW50KyspO1xuICB9XG4gIGF3YWl0IG9wdHMuZmV0Y2goZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTChcIi9hcGkvZmFpbHVyZUNhbGxiYWNrXCIpLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBmaWxlS2V5OiBvcHRzLmtleVxuICAgIH0pLFxuICAgIGhlYWRlcnM6IG9wdHMudXRSZXF1ZXN0SGVhZGVyc1xuICB9KTtcbiAgY29uc3QgdGV4dCA9IGF3YWl0IHMzUmVzLnRleHQoKTtcbiAgY29uc3QgcGFyc2VkID0gbWF5YmVQYXJzZVJlc3BvbnNlWE1MKHRleHQpO1xuICBpZiAocGFyc2VkID09IG51bGwgPyB2b2lkIDAgOiBwYXJzZWQubWVzc2FnZSkge1xuICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgIGNvZGU6IFwiVVBMT0FEX0ZBSUxFRFwiLFxuICAgICAgbWVzc2FnZTogcGFyc2VkLm1lc3NhZ2VcbiAgICB9KTtcbiAgfVxuICB0aHJvdyBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gdXBsb2FkIGZpbGUgdG8gc3RvcmFnZSBwcm92aWRlclwiLFxuICAgIGNhdXNlOiBzM1Jlc1xuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHVwbG9hZFBhcnRXaXRoUHJvZ3Jlc3Mob3B0cywgcmV0cnlDb3VudCA9IDApIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihcIlBVVFwiLCBvcHRzLnVybCwgdHJ1ZSk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgb3B0cy5maWxlVHlwZSk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICBcIkNvbnRlbnQtRGlzcG9zaXRpb25cIixcbiAgICAgIFtcbiAgICAgICAgb3B0cy5jb250ZW50RGlzcG9zaXRpb24sXG4gICAgICAgIGBmaWxlbmFtZT1cIiR7ZW5jb2RlVVJJKG9wdHMuZmlsZU5hbWUpfVwiYCxcbiAgICAgICAgYGZpbGVuYW1lKj1VVEYtOCcnJHtlbmNvZGVVUkkob3B0cy5maWxlTmFtZSl9YFxuICAgICAgXS5qb2luKFwiOyBcIilcbiAgICApO1xuICAgIHhoci5vbmxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICBjb25zdCBldGFnID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiRXRhZ1wiKTtcbiAgICAgICAgZXRhZyA/IHJlc29sdmUoZXRhZykgOiByZWplY3QoXCJOTyBFVEFHXCIpO1xuICAgICAgfSBlbHNlIGlmIChyZXRyeUNvdW50IDwgb3B0cy5tYXhSZXRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gTWF0aC5wb3coMiwgcmV0cnlDb3VudCkgKiAxZTM7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHNldFRpbWVvdXQocmVzLCBkZWxheSkpO1xuICAgICAgICBhd2FpdCB1cGxvYWRQYXJ0V2l0aFByb2dyZXNzKG9wdHMsIHJldHJ5Q291bnQgKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChcIk1heCByZXRyaWVzIGV4Y2VlZGVkXCIpO1xuICAgICAgfVxuICAgIH07XG4gICAgbGV0IGxhc3RQcm9ncmVzcyA9IDA7XG4gICAgeGhyLm9uZXJyb3IgPSBhc3luYyAoKSA9PiB7XG4gICAgICBsYXN0UHJvZ3Jlc3MgPSAwO1xuICAgICAgaWYgKHJldHJ5Q291bnQgPCBvcHRzLm1heFJldHJpZXMpIHtcbiAgICAgICAgY29uc3QgZGVsYXkgPSBNYXRoLnBvdygyLCByZXRyeUNvdW50KSAqIDEwMDtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlcykgPT4gc2V0VGltZW91dChyZXMsIGRlbGF5KSk7XG4gICAgICAgIGF3YWl0IHVwbG9hZFBhcnRXaXRoUHJvZ3Jlc3Mob3B0cywgcmV0cnlDb3VudCArIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KFwiTWF4IHJldHJpZXMgZXhjZWVkZWRcIik7XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHIudXBsb2FkLm9ucHJvZ3Jlc3MgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgZGVsdGEgPSBlLmxvYWRlZCAtIGxhc3RQcm9ncmVzcztcbiAgICAgIGxhc3RQcm9ncmVzcyArPSBkZWx0YTtcbiAgICAgIG9wdHMub25Qcm9ncmVzcyhkZWx0YSk7XG4gICAgfTtcbiAgICB4aHIuc2VuZChvcHRzLmNodW5rKTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7XG4gIG1heWJlUGFyc2VSZXNwb25zZVhNTCxcbiAgdXBsb2FkUGFydCxcbiAgdXBsb2FkUGFydFdpdGhQcm9ncmVzc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVMzUjNWWFJLLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_DO_NOT_USE__fatalClientError: () => (/* binding */ INTERNAL_DO_NOT_USE__fatalClientError),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   getFullApiUrl: () => (/* reexport safe */ _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/client.ts\n\n\n// src/internal/ut-reporter.ts\n\nvar createAPIRequestUrl = (config) => {\n  const url = new URL(config.url);\n  const queryParams = new URLSearchParams(url.search);\n  queryParams.set(\"actionType\", config.actionType);\n  queryParams.set(\"slug\", config.slug);\n  url.search = queryParams.toString();\n  return url;\n};\nvar createUTReporter = (cfg) => {\n  return async (type, payload) => {\n    const url = createAPIRequestUrl({\n      url: cfg.url,\n      slug: cfg.endpoint,\n      actionType: type\n    });\n    const response = await fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n    switch (type) {\n      case \"failure\": {\n        const p = payload;\n        const parsed = (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(p.s3Error ?? \"\");\n        if (parsed == null ? void 0 : parsed.message) {\n          throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: parsed.code,\n            message: parsed.message\n          });\n        } else {\n          throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: `Failed to upload file ${p.fileName} to S3`,\n            cause: p.s3Error\n          });\n        }\n      }\n    }\n    return response.ok;\n  };\n};\n\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config) => {\n  const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config) : [];\n  const maxFileCount = config ? Object.values(config).map((v) => v.maxFileCount) : [];\n  return { fileTypes, multiple: maxFileCount.some((v) => v && v > 1) };\n};\nvar capitalizeStart = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config) => {\n  if (!config)\n    return \"\";\n  const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config);\n  const formattedTypes = allowedTypes.map((f) => f === \"blob\" ? \"file\" : f);\n  if (formattedTypes.length > 1) {\n    const lastType = formattedTypes.pop();\n    return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n  }\n  const key = allowedTypes[0];\n  const formattedKey = formattedTypes[0];\n  const { maxFileSize, maxFileCount } = config[key];\n  if (maxFileCount && maxFileCount > 1) {\n    return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n  } else {\n    return `${formattedKey} (${maxFileSize})`;\n  }\n};\nvar allowedContentTextLabelGenerator = (config) => {\n  return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args) => {\n  if (typeof styleField === \"string\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"string\")\n      return result;\n  }\n  return \"\";\n};\nvar styleFieldToCssObject = (styleField, args) => {\n  if (typeof styleField === \"object\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"object\")\n      return result;\n  }\n  return {};\n};\nvar contentFieldToContent = (contentField, arg) => {\n  if (!contentField)\n    return null;\n  if (typeof contentField !== \"function\")\n    return contentField;\n  if (typeof contentField === \"function\") {\n    const result = contentField(arg);\n    return result;\n  }\n};\n\n// src/client.ts\nvar INTERNAL_DO_NOT_USE__fatalClientError = (e) => new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n  code: \"INTERNAL_CLIENT_ERROR\",\n  message: \"Something went wrong. Please report this to UploadThing.\",\n  cause: e\n});\nvar DANGEROUS__uploadFiles = async (endpoint, opts) => {\n  const reportEventToUT = createUTReporter({\n    endpoint: String(endpoint),\n    url: opts.url\n  });\n  const s3ConnectionRes = await fetch(\n    createAPIRequestUrl({\n      url: opts.url,\n      slug: String(endpoint),\n      actionType: \"upload\"\n    }),\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        input: \"input\" in opts ? opts.input : null,\n        files: opts.files.map((f) => ({ name: f.name, size: f.size }))\n      }),\n      // Express requires Content-Type to be explicitly set to parse body properly\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ).then(async (res) => {\n    if (!res.ok) {\n      const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError.fromResponse(res);\n      throw error;\n    }\n    const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)(res);\n    if (jsonOrError instanceof Error) {\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: jsonOrError.message,\n        cause: res\n      });\n    }\n    return jsonOrError;\n  });\n  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n      code: \"BAD_REQUEST\",\n      message: \"No URL. How did you even get here?\",\n      cause: s3ConnectionRes\n    });\n  }\n  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {\n    var _a;\n    const file = opts.files.find((f) => f.name === presigned.fileName);\n    if (!file) {\n      console.error(\"No file found for presigned URL\", presigned);\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"NOT_FOUND\",\n        message: \"No file found for presigned URL\",\n        cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(\",\")}'`\n      });\n    }\n    const {\n      presignedUrls,\n      uploadId,\n      chunkSize,\n      contentDisposition,\n      key,\n      pollingUrl,\n      pollingJwt\n    } = presigned;\n    let uploadedBytes = 0;\n    let etags;\n    (_a = opts.onUploadBegin) == null ? void 0 : _a.call(opts, { file: file.name });\n    try {\n      etags = await Promise.all(\n        presignedUrls.map(async (url, index) => {\n          const offset = chunkSize * index;\n          const end = Math.min(offset + chunkSize, file.size);\n          const chunk = file.slice(offset, end);\n          const etag = await (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPartWithProgress)({\n            url,\n            chunk,\n            contentDisposition,\n            fileType: file.type,\n            fileName: file.name,\n            maxRetries: 10,\n            onProgress: (delta) => {\n              var _a2;\n              uploadedBytes += delta;\n              const percent = uploadedBytes / file.size * 100;\n              (_a2 = opts.onUploadProgress) == null ? void 0 : _a2.call(opts, { file: file.name, progress: percent });\n            }\n          });\n          return { tag: etag, partNumber: index + 1 };\n        })\n      );\n    } catch (error) {\n      await reportEventToUT(\"failure\", {\n        fileKey: key,\n        uploadId,\n        fileName: file.name,\n        s3Error: error.toString()\n      });\n      throw \"unreachable\";\n    }\n    const uploadOk = await reportEventToUT(\"multipart-complete\", {\n      uploadId,\n      fileKey: key,\n      etags\n    });\n    if (!uploadOk) {\n      console.log(\"Failed to alert UT of upload completion\");\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to alert UT of upload completion\"\n      });\n    }\n    await new Promise((r) => setTimeout(r, 750));\n    const serverData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.withExponentialBackoff)(async () => {\n      const res = await fetch(pollingUrl, {\n        headers: { authorization: pollingJwt }\n      }).then((r) => r.json());\n      return res.status === \"done\" ? res.callbackData : void 0;\n    });\n    return {\n      name: file.name,\n      size: file.size,\n      key: presigned.key,\n      serverData,\n      url: \"https://utfs.io/f/\" + key\n    };\n  });\n  return Promise.all(fileUploadPromises);\n};\nvar genUploader = (initOpts) => {\n  const url = (initOpts == null ? void 0 : initOpts.url) instanceof URL ? initOpts.url : (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl)(initOpts == null ? void 0 : initOpts.url);\n  return (endpoint, opts) => (\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    DANGEROUS__uploadFiles(endpoint, {\n      ...opts,\n      url\n    })\n  );\n};\nvar classNames = (...classes) => {\n  return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes) => {\n  const accepted = fileTypes.map((type) => {\n    if (type === \"blob\")\n      return \"blob\";\n    if (type === \"pdf\")\n      return \"application/pdf\";\n    if (type.includes(\"/\"))\n      return type;\n    else\n      return `${type}/*`;\n  });\n  if (accepted.includes(\"blob\")) {\n    return void 0;\n  }\n  return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes) => {\n  const mimeTypes = generateMimeTypes(fileTypes);\n  if (!mimeTypes)\n    return void 0;\n  return Object.fromEntries(mimeTypes.map((type) => [type, []]));\n};\n\n//# sourceMappingURL=client.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ })

};
;