generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Profile {
  id       String   @id @default(cuid()) @map("_id")
  userId   String   @unique
  name     String
  imageUrl String
  email    String

  servers   Server[]
  members   Member[]
  channels  Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String   @id @default(cuid()) @map("_id")
  name       String
  imageUrl   String
  inviteCode String   @unique

  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  String

  members    Member[]
  channels   Channel[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id            String       @id @default(cuid()) @map("_id")
  role          MemberRole   @default(GUEST)

  profile       Profile      @relation(fields: [profileId], references: [id])
  profileId     String

  server        Server       @relation(fields: [serverId], references: [id])
  serverId      String

  messages      Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id         String       @id @default(cuid()) @map("_id")
  name       String
  type       ChannelType  @default(TEXT)

  profile    Profile      @relation(fields: [profileId], references: [id])
  profileId  String

  server     Server       @relation(fields: [serverId], references: [id])
  serverId   String

  messages   Message[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Message {
  id          String      @id @default(cuid()) @map("_id")
  content     String

  fileUrl     String?

  member      Member      @relation(fields: [memberId], references: [id])
  memberId    String

  channel     Channel     @relation(fields: [channelId], references: [id])
  channelId   String

  deleted     Boolean     @default(false)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Conversation {
  id            String          @id @default(cuid()) @map("_id")

  memberOne     Member          @relation("MemberOne", fields: [memberOneId], references: [id])
  memberOneId   String

  memberTwo     Member          @relation("MemberTwo", fields: [memberTwoId], references: [id])
  memberTwoId   String

  directMessages DirectMessage[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model DirectMessage {
  id              String        @id @default(cuid()) @map("_id")
  content         String
  fileUrl         String?

  member          Member        @relation(fields: [memberId], references: [id])
  memberId        String

  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  conversationId  String

  deleted         Boolean       @default(false)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
